#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');

const createParser = require('./jparser');
const ErrorManager = require('./ErrorManager');

// promisify exec
const execPromise = util.promisify(exec);

if (process.argv.length < 3) {
  console.error('يرجا ئعطائ ملف جني');
  process.exit(1);
}

var mainFilePath = null;
var jinniParams = [];
var userParams = [];

var processArgs = process.argv.slice(2);

// parse parameters
processArgs.forEach(arg => {
	if (arg.startsWith('--') && !mainFilePath) {
		jinniParams.push(arg);
	} else if (!arg.startsWith('--') && !mainFilePath) {
		mainFilePath = path.resolve(arg);
	} else {
		userParams.push(arg);
	}
});

//var mainFilePath = path.resolve(process.argv[2]);
var is_nowarning = jinniParams.includes('--nowarnings') || jinniParams.includes('--nowarning');
var is_web = jinniParams.includes('--web');
var is_norun = jinniParams.includes('--norun');
var is_nocompile = jinniParams.includes('--nocompile');

ErrorManager.showWarnings = !is_nowarning;

if (!mainFilePath.endsWith('.جني')) {
	console.error('يرجا ئعطائ ملف جني');
	process.exit();
}

const projectPath = path.resolve(path.dirname(mainFilePath));
const fileName = path.basename(mainFilePath, '.جني');
const outPath = path.join(projectPath, '__خام__');

if (is_nocompile) {
	return runScript();
}


// remove then create bin folder
try {
	fs.rmSync(outPath, { recursive: true });
} catch (err) {
} finally {
	fs.mkdirSync(outPath);
}

let code;
try {
	const data = fs.readFileSync(mainFilePath, 'utf8');
	code = data;
} catch (error) {
	console.error('فشلت قرائة الملف: ', error);
}

try {
	const parser = createParser();
	const result = parser.parse(code, {
		filePath: mainFilePath,
		projectPath: projectPath,
		outPath: outPath
	});
} catch (error) {
	let projectBasePath = path.dirname(projectPath);
	console.error("ملف: " + mainFilePath.replace(projectBasePath, ''));
	console.error(error);
}

ErrorManager.printAll(false);

if (ErrorManager.isBlocking) {
	console.error('خطئين فادحين، ترجا المراجعة');
	process.exit();
}

// read from template.html
if (is_web) {
	try {
		const data = fs.readFileSync(path.join(__dirname, './template.html'), 'utf8');
		code = data;
	} catch (error) {
		console.error('فشلت قرائة الملف: ', error);
	}

	// create index.html
	try {
		code = code.replace('%ئسملف%', fileName);
		fs.writeFileSync(path.join(projectPath, 'index.html'), code, { flag: 'w+' });
	} catch (error) {
		console.error('فشلت الكتابة في الملف: ', error);
	}
	
	// run jiss
	async function runJiss() {
		try {
			const { stdout, stderr } = await execPromise('jinni --nowarnings --nocompile ~/.jinni/jiss ' + path.join(projectPath));
			if (stderr) {
				console.error(stderr);
			}
			console.log(stdout);
		} catch (error) {
			console.error(error.message);
		}
	}
	
	runJiss();
	
} else {
	// run
	if (!is_norun) {
		runScript();
	}
}

async function runScript() {
	try {
		const { stdout, stderr } = await execPromise('node ' + path.join(projectPath, '__خام__', 'مدخل.mjs ') + userParams.join(' '));
		if (stderr) {
			console.error(stderr);
		}
		console.log(stdout);
	} catch (error) {
		console.error(error.message);
	}
}
