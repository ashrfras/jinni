/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,11],$V2=[1,30],$V3=[1,35],$V4=[1,14],$V5=[1,28],$V6=[1,25],$V7=[1,41],$V8=[1,40],$V9=[1,36],$Va=[1,42],$Vb=[1,43],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,37],$Vh=[5,10,27,32,37,38,60,79,82,127,128,134,136,140,141,142,143,144],$Vi=[1,47],$Vj=[1,64],$Vk=[1,63],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,51],$Vw=[1,52],$Vx=[1,70],$Vy=[2,53],$Vz=[26,35,44,62,80,83,95,100,102,107,108,109,110,112,113,114,115,116,117,119,120],$VA=[1,77],$VB=[2,181],$VC=[1,80],$VD=[1,79],$VE=[1,81],$VF=[2,183],$VG=[1,84],$VH=[1,83],$VI=[35,80],$VJ=[2,193],$VK=[1,90],$VL=[1,89],$VM=[1,91],$VN=[1,96],$VO=[1,102],$VP=[1,103],$VQ=[2,5,10,27,32,37,38,46,60,71,73,74,79,82,86,87,90,92,94,100,102,127,128,134,136,140,141,142,143,144],$VR=[26,29,35],$VS=[1,125],$VT=[1,128],$VU=[35,62],$VV=[2,139],$VW=[1,142],$VX=[1,144],$VY=[33,44],$VZ=[1,162],$V_=[1,164],$V$=[1,163],$V01=[1,160],$V11=[26,35,44,62,80,83,95,102,107,108,109,110,112,113,114,115,116,117,119,120],$V21=[35,83],$V31=[26,35,44,62,80,83,102,107,108,109,110,112,113,114,115,116,117,119,120],$V41=[26,35,44,62,80,83,102,107,108],$V51=[26,35,44,62,80,83,102,107,108,109,110],$V61=[26,35,44,62,80,83,102,107,108,109,110,112,113,114,115,116,117],$V71=[1,190],$V81=[1,195],$V91=[1,191],$Va1=[1,192],$Vb1=[1,193],$Vc1=[1,194],$Vd1=[1,196],$Ve1=[1,197],$Vf1=[1,203],$Vg1=[1,204],$Vh1=[1,205],$Vi1=[26,35,40,44,62,80,83,95,100,102,107,108,109,110,112,113,114,115,116,117,119,120],$Vj1=[2,75],$Vk1=[26,33,35,36,40,44,60,62,79,80,83,95,100,102,107,108,109,110,112,113,114,115,116,117,119,120],$Vl1=[1,216],$Vm1=[26,35,40,46,62,73,83],$Vn1=[2,64],$Vo1=[1,236],$Vp1=[26,36],$Vq1=[2,32,37,46,60,71,73,74,79,82,86,87,90,92,94,100,102,127,128,134,136,140,141,142,143,144],$Vr1=[26,95,100,107,108,109,110,112,113,114,115,116,117,119,120],$Vs1=[1,266],$Vt1=[26,35,46,83],$Vu1=[26,33,35,36,44,62,80,83,95,100,102,107,108,109,110,112,113,114,115,116,117,119,120],$Vv1=[26,33,35,36,40,44,60,62,80,83,95,100,102,107,108,109,110,112,113,114,115,116,117,119,120],$Vw1=[1,300],$Vx1=[46,102];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declstatement_list":4,"EOF":5,"declstatement":6,"import_statement":7,"semic_or_nl":8,"function_def":9,"var_def":10,"variable_def":11,"struct_def":12,"expression":13,"statement_list":14,"statement":15,"super_call":16,"shortcuts_call":17,"has_statement":18,"var_declaration":19,"say_statement":20,"return_statement":21,"while_statement":22,"for_in_statement":23,"if_statement":24,"assignment":25,"؛":26,"IMPORT":27,"import_specifier":28,"FROM":29,"import_path":30,"import_list":31,"IDENTIFIER":32,"AS":33,"ALL":34,"،":35,".":36,"STRING":37,"DECL":38,"type_decl":39,"=":40,"struct_decl":41,"struct_body":42,"STRUCT":43,":":44,"has_list":45,"END":46,"enum_def":47,"enum_decl":48,"enum_body":49,"ENUM":50,"enum_list":51,"enum_elem":52,"function_decl":53,"function_ret":54,"body_block":55,"subfunc_decl":56,"PROMISE":57,"function_decl_name":58,"function_decl_params":59,"(":60,"param_list":61,")":62,"subfunc_decl_name":63,"param":64,"param_def":65,"DALA":66,"is_param_opt":67,"dala_params":68,"؟":69,"dala_param_types":70,"SUPER":71,"arg_list":72,"SHORTCUTS":73,"HAS":74,"has_list_elements":75,"has_list_element":76,"param_decl":77,"param_init":78,"[":79,"]":80,"enum_members":81,"{":82,"}":83,"string_list":84,"identifier_list":85,"DEF":86,"SAY":87,"wtype_expr":88,"WTYPE":89,"RETURN":90,"while_head":91,"WHILE":92,"for_in_head":93,"FOR":94,"IN":95,"if_head":96,"noend_block":97,"elif_clauses":98,"else_clause":99,"IF":100,"elif_head":101,"ELSE":102,"else_head":103,"member_access":104,"array_access":105,"arithmetic":106,"+":107,"-":108,"×":109,"÷":110,"comparison":111,"EQ":112,"NEQ":113,"LT":114,"LTE":115,"GT":116,"GTE":117,"logical":118,"AND":119,"OR":120,"ternary":121,"function_call":122,"func_arg":123,"lambda_expr":124,"declare_dala":125,"await_expr":126,"AWAIT":127,"SELF":128,"object_literal":129,"property_list":130,"property":131,"array_elements":132,"spread_operator":133,"SPREAD":134,"logical_negation":135,"NOT":136,"in_expression":137,"type_casting":138,"parenthesis_expr":139,"NUMBER":140,"TRUE":141,"FALSE":142,"NULL":143,"JNX":144,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"var_def",26:"؛",27:"IMPORT",29:"FROM",32:"IDENTIFIER",33:"AS",34:"ALL",35:"،",36:".",37:"STRING",38:"DECL",40:"=",43:"STRUCT",44:":",46:"END",50:"ENUM",57:"PROMISE",60:"(",62:")",66:"DALA",69:"؟",71:"SUPER",73:"SHORTCUTS",74:"HAS",79:"[",80:"]",82:"{",83:"}",86:"DEF",87:"SAY",89:"WTYPE",90:"RETURN",92:"WHILE",94:"FOR",95:"IN",100:"IF",102:"ELSE",107:"+",108:"-",109:"×",110:"÷",112:"EQ",113:"NEQ",114:"LT",115:"LTE",116:"GT",117:"GTE",119:"AND",120:"OR",127:"AWAIT",128:"SELF",134:"SPREAD",136:"NOT",140:"NUMBER",141:"TRUE",142:"FALSE",143:"NULL",144:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[14,1],[14,2],[15,2],[15,2],[15,2],[15,2],[15,2],[15,2],[15,1],[15,1],[15,1],[15,2],[15,2],[15,1],[8,1],[7,4],[7,2],[28,1],[28,3],[28,3],[31,1],[31,3],[30,1],[30,3],[30,1],[11,4],[11,6],[11,4],[12,3],[41,2],[42,3],[47,3],[48,2],[49,3],[51,1],[51,3],[52,1],[52,3],[9,3],[9,3],[54,2],[54,3],[54,0],[53,2],[58,2],[59,3],[56,2],[63,4],[61,0],[61,1],[61,3],[64,1],[64,6],[67,0],[67,1],[68,3],[70,0],[70,1],[70,3],[55,3],[55,2],[16,5],[17,2],[18,2],[45,0],[45,1],[75,1],[75,3],[76,1],[76,3],[65,1],[65,2],[77,2],[77,3],[77,5],[77,6],[77,6],[78,2],[81,1],[81,1],[84,1],[84,3],[85,1],[85,3],[19,2],[19,4],[19,2],[19,4],[19,4],[19,6],[20,2],[88,2],[21,2],[21,1],[22,2],[91,2],[23,2],[93,4],[24,5],[24,4],[24,4],[24,3],[96,2],[98,2],[98,3],[101,3],[97,2],[99,2],[103,1],[25,3],[25,3],[25,3],[106,3],[106,3],[106,3],[106,3],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3],[118,3],[118,3],[121,5],[122,4],[122,4],[122,4],[72,0],[72,1],[72,3],[123,1],[123,1],[123,3],[123,3],[124,4],[125,1],[126,2],[104,3],[104,3],[104,3],[104,3],[104,3],[104,5],[105,4],[105,4],[105,4],[129,3],[129,2],[130,1],[130,3],[131,3],[131,3],[132,0],[132,1],[132,3],[39,1],[39,3],[133,2],[135,2],[137,3],[138,2],[139,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,1],[13,1],[13,2],[13,1],[13,2],[13,1],[13,1],[13,3],[13,4],[13,1],[13,1],[13,4],[13,1],[13,1],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var result = $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		let fileName = context.filePath.replace(context.projectPath, '.').replace('.جني', '.mjs');
		fileName = fileName.replace(__dirname, '.');
		fileName = fileName.replaceAll('/', '.').replace('..', '/');
		
		// make sure not to repeat last two names: ئساسية.ئساسية.جني becomes ئساسية.جني
		var nameArr = fileName.split('.');
		var lastName = nameArr[nameArr.length - 2];
		var lastLastName = nameArr[nameArr.length - 3];
		if (lastLastName) {
			if (lastName == lastLastName.replace('/', '')) {
				fileName = fileName.replace(lastName + '.', '');
			}
		}
		
		let outFilePath = path.join(context.outPath, fileName);
		
		fs.writeFile(outFilePath, result, { flag: 'w+' }, (err) => {
			if (err) {
				throw new Error('فشل حفض الملف: ' + outFilePath);
			}
		});	
		// get global scope
		var glob = yy.symbolScopes.exit();
		return glob; // return global scope
    
break;
case 3: case 11:
 this.$ = [$$[$0]]; 
break;
case 4: case 12:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 7: case 8: case 13: case 15: case 16: case 17: case 18:
 this.$ = $$[$0-1]; 
break;
case 6: case 9: case 19: case 20: case 21: case 31: case 33: case 35:
 this.$ = $$[$0]; 
break;
case 10: case 22: case 23:
 this.$ = $$[$0-1].value; 
break;
case 14: case 24: case 59:
 this.$ = ''; 
break;
case 26:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ImportManager.setContext(context);
		
		var importSpecifier = $$[$0-2];
		var scope;
		
		// if there is only one find, we pass it to the importmanager
		// so we can treat cases like these:
		// import جيزن from ئساسية
		// it will look for جيزن in path ئساسية/جيزن.جني
		// since it will not find neither ئساسية.جني nor ئساسية/ئساسية.جني
		if (importSpecifier.find.length == 1) {
			scope = ImportManager.addImport($$[$0], context.filePath, importSpecifier.find);
		} else {
			scope = ImportManager.addImport($$[$0], context.filePath);
		}
		
		if (importSpecifier.find == 'all') {
			var mySymb;
			if (!scope) { // string import
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add, 'مجهول');
			} else {
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add);
				scope.copyToSymbol(mySymb);
			}
		} else {
			if (!scope) { // string import
				importSpecifier.add.forEach((add) => {
					yy.symbolScopes.declareSymbol(add, 'مجهول');
				});
			} else {
				var i = 0;
				importSpecifier.find.forEach((find) => {
					var symb = scope.getSymbolByName(find);
					if (!symb) {
						ErrorManager.error("الئسم " + find + " غير معروف في الوحدة '" + $$[$0] + "'");
					}
					// TODO REVIEW symb.name = sym.add
					symb.name = importSpecifier.add[i];
					yy.symbolScopes.addSymbol(symb);
					i++;
				});
			}
		}
		
		var exp = $$[$0-2].value;
		if (exp.includes('* as ')) {
			exp = '{' + exp.replace('* as ', '') + '}';
		} else if (exp.includes(' as ')) {
			var tmp = exp.split (' as ');
			exp = '{' + tmp[1];
		}
		if (!scope) { // this is a string import
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";export ' + exp; 
			}
		} else {
			var imp = './' + $$[$0] + '.mjs';
			if (scope.getSourceFile() && (!$$[$0].endsWith(scope.getSourceFile()))) {
				imp = './' + $$[$0] + '.' + scope.getSourceFile() + '.mjs';
			}
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";export ' + exp;
		}
	
break;
case 27:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		var importNames = $$[$0].split(', ');
		var result = '';
		importNames.forEach (impName => {
			var scope = ImportManager.addImport(impName, context.filePath);
			var symb = scope.getSymbolByName(impName);
			if (!symb) {
				ErrorManager.error("الئسم " + impName + " غير معروف في الوحدة '" + impName + "'");
			}
			// TODO REVIEW symb.name = sym.add
			yy.symbolScopes.addSymbol(symb);
			var imp = './' + scope.getImportName() + '.mjs';
			var exp = impName;
			var sep = result == '' ? '' : ';';
			result += sep + 'import {' + impName + '} from "' + imp + '";export {' + exp + '}';
		});
		this.$ = result;
	
break;
case 28:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 29:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 30:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 32:

		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 34:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 36:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = null';
	
break;
case 37:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-4], $$[$0-2].symb, $$[$0-2].isArray, $$[$0-2].subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		if (! $$[$0].symb.canBeAssignedTo(mySymb) ) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toTypeString());
		}
		this.$ = ($$[$0-4].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-4] + ' = ' + $$[$0].value;
	
break;
case 38:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb.typeSymbol, $$[$0].symb.isArray, $$[$0].symb.subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 39:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		this.$ = 'export const ' + $$[$0-1] + ' = {}'; // no output
	
break;
case 40:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isStruct = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
		this.$ = $$[$0];
	
break;
case 41:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current struct symbol
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of symbols
		symbols.forEach((symb) => {
			funcSymb.addMember(symb);
		});
	
break;
case 42:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		this.$ = ''; // no output
	
break;
case 43:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isEnum = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
	
break;
case 44:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current enum symbol
		var enums = $$[$0-1]; // $$[$0-1] enum_list is an array of {symb, value}
		enums.forEach((enu) => {
			funcSymb.addMember(enu.symb);
		});
	
break;
case 45: case 93:

		this.$ = [$$[$0]]
	
break;
case 46:

		$$[$0-2].push($$[$0]);
		if ($$[$0].value == null) {
			$$[$0].value = $$[$0-2].length
		}
		this.$ = $$[$0-2];
	
break;
case 47:

		this.$ = {
			symb: yy.symbolScopes.createSymbol($$[$0], 'عدد'),
			value: null
		}
	
break;
case 48:

		this.$ = {
			symb: yy.symbolScopes.createSymbol($$[$0-2], $$[$0].symb.getTypeName()),
			value: $$[$0].value
		}
	
break;
case 49:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		if (body_block.includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb;
		}
		
		var extendStr = '';
		if (funcSymb.hasParent()) {
			extendStr = ' extends ' + funcSymb.mySuper;
		}
		
		if (!selfSymb.isClass && !function_ret.symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة '" + funcSymb.toString() + "'");
		}
		
		if (function_decl.funcname == 'مدخل') { // self exec main function
			this.$ = '(async function ' + function_decl.funcname + function_decl.params + body_block + ')()'; 
		} else if (funcSymb.isShortcut()) { // this is a shortcut
			this.$ = function_decl.exportStr + 'const ' + function_decl.funcname + '=' + funcSymb.myShortcut + ';'
				/* + function_decl.funcname + '.prototype || (' + function_decl.funcname + '.prototype = {});' */
				+ body_block.slice(1,-1); // remove first and last { }
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if (funcSymb.typeIsNot(funcSymb.name)) {
				ErrorManager.error("لا يجب تحديد نوع ئرجاع لصنف <" + funcSymb.getTypeName() + ">");
			}
			this.$ = function_decl.exportStr + 'class ' + function_decl.funcname + extendStr + '{constructor' + function_decl.params + body_block + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.exportStr + asyncStr + 'function ' + function_decl.funcname + function_decl.params + body_block;
		}
	
break;
case 50:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var funcSymb = yy.funcStack.pop();
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		
		// subfunction, means self is a class
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb;
		
		// dealing with setters and getters (DISABLED FOR NOW)
		/*
		var setterCode = '';
		var getterCode = '';
		if (function_decl.funcname.startsWith('رد')) {
			// getter function
			getterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{get: function() {return this.${function_decl.funcname}();},configurable:true});`;
		}
		if (function_decl.funcname.startsWith('خد')) {
			// setter function
			setterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{set: function (value) {this.${function_decl.funcname}(value);},configurable:true});`;
		}
		*/
		
		if (funcSymb.isShortcut()) {
			var result = function_decl.objname + '.prototype != null && (' + function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.prototype.' + funcSymb.myShortcut + ');';
			result += function_decl.objname + '.' + function_decl.funcname + '=' + function_decl.objname + '.' + funcSymb.myShortcut + ';';
			this.$ = result;
		} else {
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.objname + '.prototype.' + function_decl.funcname + '=' /*+ function_decl.objname + '.' + function_decl.funcname + '='*/ + asyncStr + 'function' + function_decl.value + body_block;
		}
	
break;
case 51:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// $$[$0] = { type, subtype }
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		//funcSymb.typeSymbol = yy.symbolScopes.getSymbByName($$[$0].type);
		funcSymb.typeSymbol = $$[$0].symb;
		funcSymb.isArray = $$[$0].isArray;
		if ($$[$0].isArray && !$$[$0].subTypeSymbol) {	
			console.error($$[$0]);
			throw new Error ('مصفوفة دون نوع فرعي');
		}
		funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 52:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		//funcSymb.typeSymbol = yy.symbolScopes.getSymbByName($$[$0].type);
		funcSymb.typeSymbol = $$[$0].symb;
		funcSymb.isArray = $$[$0].isArray;
		funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		funcSymb.isAwait = true;
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 53:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 54:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0]
		}
	
break;
case 55:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ErrorManager.setFunc($$[$0]);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], 'فارغ');
		
		yy.selfStack.push(mySymb);
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();	
		
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 56:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 57:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 58:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.setFunc($$[$0-2] + '.' + $$[$0]);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		yy.selfStack.push(mySymb);
		yy.symbolScopes.enter();
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0], 'فارغ');
		mySymb.addMember(mySymb2);
		yy.funcStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 60:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = $$[$0];
	
break;
case 61:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = $$[$0-2] + ',' + $$[$0];
	
break;
case 62:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.args.push({
			symb: $$[$0].symb,
			init: $$[$0].init
		});
		this.$ = $$[$0].value;
	
break;
case 63:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'دالة', false, $$[$0].symb.name);
		funcSymb.args.push({
			symb: symb,
			init: $$[$0-3]
		});
		this.$ = $$[$0-4];
	
break;
case 64:

		/* empty */
		this.$ = false;
	
break;
case 65:

		this.$ = true;
	
break;
case 66: case 67:

		this.$ = "";
	
break;
case 68: case 69:

		//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = "";
	
break;
case 70:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0-1].filter(Boolean).join(';') + '}';
	
break;
case 71:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{}';
	
break;
case 72:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var superSymb = yy.symbolScopes.getSymbByName($$[$0-3]);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.mySuper = $$[$0-3];
		
		// check args
		var paramValues = superSymb.checkArgs($$[$0-1]);

		// copy super members to self members
		// superSymb.copyMembersTo(selfSymb);
		selfSymb.superSymbol = superSymb;
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb; // change type to itself

		// if this class already shortcuts, then don't call super()
		if (selfSymb.isShortcut()) {
			this.$ = '';
		} else {
			this.$ = 'super(' + $$[$0-1] + ')';
		}
    
break;
case 73:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.myShortcut = $$[$0];
		if (selfSymb.name == funcSymb.name) { // we are in a class
			selfSymb.myShortcut = $$[$0];
			var superSymb = yy.symbolScopes.getSymbByName($$[$0]);
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb; // change type to itself
			// if already have members, this means we used a has or extends before shortcuts > error
			if (selfSymb.members.length) {
				ErrorManager.error('يجب ئن تكون صيغة يختصر كئول سطر في المجموعة');
			}
			// copy origi members to self members if we are in a class
			superSymb.copyMembersTo(selfSymb);
		} else { // we are in a subfunction
			if (!selfSymb.isShortcut()) {
				// parent not shortcuting
				selfSymb.checkMember($$[$0]);
			} else {
				// parent have a shortcut
				var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
				superSymb.checkMember($$[$0]);
			}
		}
	
break;
case 74:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true; // has keyword makes this a class
		selfSymb.typeSymbol = selfSymb; // change type to itself
		
		var thisStr = 'this';
		if (selfSymb.isShortcut()) {
			thisStr = selfSymb.name + '.prototype';
		}
		var result = ''; // will contain setter, getter output for the property
		
		// $$[$0] has_list is an array of symbols
		var symbols = $$[$0];
		symbols.forEach((symb) => {
			selfSymb.addMember(symb);
			if (symb.isShortcut()) {
				// declare setters & getters
				var name = symb.myShortcut;
				var getterCode = `return this.${name}`;
				var setterCode = `this.${name} = value;`;
				result += `Object.defineProperty(${selfSymb.name}.prototype, '${symb.name}', {get: function() {${getterCode}}, set: function(value) {${setterCode}} });`;
			}
			if (symb.isStruct) {
				result += 'this.' + symb.name + ' = {};';
			}
		});
		this.$ = result;
	
break;
case 75:
 
		this.$ = []; 
	
break;
case 76: case 88: case 89: case 90:

		this.$ = $$[$0];
	
break;
case 77:

		this.$ = [$$[$0]];
	
break;
case 78:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 79:

		this.$ = $$[$0].symb
	
break;
case 80:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		if (!selfSymb.isShortcut()) {
			// parent not shortcuting
			selfSymb.checkMember($$[$0]);
		} else {
			// parent have a shortcut
			var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
			superSymb.checkMember($$[$0]);
		}
		$$[$0-2].symb.myShortcut = $$[$0];
		this.$ = $$[$0-2].symb;
	
break;
case 81:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			init: $$[$0].init
		}
	
break;
case 82:

		var paramSymb = $$[$0-1].symb;
		var initSymb = $$[$0].symb;
		if (!initSymb.canBeAssignedTo(paramSymb)) {
			ErrorManager.error("محاولة ئسناد " + initSymb.toString() + " ئلا " + paramSymb.toTypeString());
		}
		this.$ = {
			symb: paramSymb,
			value: $$[$0-1].value + '=' + $$[$0].value,
			init: true
		}
	
break;
case 83:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'منوع'),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 84:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], $$[$0-2]),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 85:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'مصفوفة', true /*isArray*/, $$[$0-4]/*subtype*/),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 86:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-1];
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 87:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], null, false, false);
		symb.isStruct = true; // bad but legacy
		// $$[$0-1] has_list is an array of symbols
		var symbols = $$[$0-1];
		symbols.forEach((s) => {
			symb.addMember(s);
		});
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 91:

		this.$ = [$$[$0].replaceAll('"', '').replaceAll("'", '')];
	
break;
case 92:

		$$[$0-2].push($$[$0].replaceAll('"', '').replaceAll("'", ''));
		this.$ = $$[$0-2];
	
break;
case 94:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2]
	
break;
case 95:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// دع ب
		yy.symbolScopes.declareSymbol($$[$0], 'منوع');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 96:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// دع ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], 'منوع', $$[$0].symb.isArray);
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// mySymb is generic add struct memebers to it
			mySymb.members = $$[$0].symb.members;
		}
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 97:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// عدد ب
		yy.symbolScopes.declareSymbol($$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 98:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد[] ب
		symb: yy.symbolScopes.declareSymbol($$[$0], 'مصفوفة', true /*isArray*/, $$[$0-3]/*subtype*/);
		//yy.symbolScopes.declareSymbol($$[$0], $$[$0-3], true);
		this.$ = 'let ' + $$[$0];
	
break;
case 99:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-3]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد '" + $$[$0].symb.toString() + "' ئلا '" + $$[$0-3] + "'");
		}
		
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 100:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		// عدد ب = 4
		var symb = yy.symbolScopes.declareSymbol($$[$0-2], 'مصفوفة', true /*isArray*/, $$[$0-5]/*subtype*/);
		
		if (!$$[$0].symb.canBeAssignedTo(symb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + symb.toString());
		}
		//yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-5], true);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 101:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 102:

		this.$ = {
			symb: yy.symbolScopes.createSymbol('', 'نصية'),
			value: $$[$0].getTypeName()
		}
	
break;
case 103:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIs('فارغ')) {
			ErrorManager.warning("ئستخدام ئرجاع في وضيفة فارغة، سيتم التحويل ئلا منوع");
			// convert function return type to منوع
			funcSymb.typeSymbol = Symbol.SYSTEMTYPES['منوع'];
		}
		
		if (!$$[$0].symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع " + $$[$0].symb.toString() + " غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!funcSymb.typeSymbol.isStruct) {
				// funcSymb is generic add struct memebers to it
				funcSymb.members = $$[$0].symb.members;
			}
		}
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 104:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIsNot('فارغ')) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		this.$ = 'return'; 
	
break;
case 105: case 107:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 106:
 
		yy.symbolScopes.enter();
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 108:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		yy.symbolScopes.declareSymbol($$[$0-2], $$[$0].symb.subTypeSymbol ? $$[$0].symb.subTypeSymbol.name : $$[$0].symb.typeSymbol.name);
		// TOREVIEW
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 109:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 110: case 111:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 112:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 113:

		yy.symbolScopes.enter();
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 114: case 115: case 118:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 116:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 117:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 119:

		yy.symbolScopes.enter();
		this.$ = 'else';
	
break;
case 120:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		this.$ = {
			symb: mySymb,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 121:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		if ($$[$0-2].symb) {
			var mySymb = $$[$0-2].symb;
			if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
				ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + $$[$0-2].symb.toString());
			}
			if ($$[$0].symb.typeIs('نوعبنية')) {
				// expression is an object literal
				if (!mySymb.typeSymbol.isStruct) {
					// mySymb is generic add struct memebers to it
					mySymb.members = $$[$0].symb.members;
				}
			}
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 122:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 123:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 124:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 125:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 126:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 127:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 128:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 129:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 130:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 131:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 132:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 133:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية وو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 134:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية ئو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 135:

		var bool1 = $$[$0-4].symb.canBeAssignedTo($$[$0].symb);
		var bool2 = $$[$0].symb.canBeAssignedTo($$[$0-4].symb);
		if (!bool1 && !bool2) {
			ErrorManager.error("ئستخدام نوعين غير متوافقين في عبارة تلاتية " + $$[$0-4].symb.toString() + " و " + $$[$0].symb.toString());
		}
		var symb;
		if (bool1) symb = $$[$0-4].symb;
		if (bool2) symb = $$[$0].symb;
		// for now type checking will be ignored for ternary
        this.$ = {
			symb: symb, //Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 136:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			value: newStr + $$[$0-3] + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 137:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-3].value + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 138:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.warning("تجاهل فحص المعطيين لئستدعائ وضيفة من مصفوفة");
		this.$ = {
			symb: $$[$0-3].symb,
			value: $$[$0-3].value + '(' + $$[$0-1].map(item => item.value).join(', ') + ')'
		}
	
break;
case 139:
 this.$ = []; 
break;
case 140:

		this.$ = [{
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		}]
	
break;
case 141:

		$$[$0-2].push({
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		})
		this.$ = $$[$0-2];
	
break;
case 142:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null,
		}
	
break;
case 143:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null
		}
	
break;
case 144: case 145:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0-2]
		}
	
break;
case 146:

		yy.symbolScopes.exit();
		var symb = yy.symbolScopes.createSymbol('', 'دالة', false, $$[$0].symb.typeSymbol.name);
		this.$ = {
			symb: symb,
			value: $$[$0-2] + "=>" + $$[$0].value
		}
	
break;
case 147:

		yy.symbolScopes.enter();
	
break;
case 148:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (!funcSymb.isAwait) {
			ErrorManager.error("ئستخدام ريتما في وضيفة متزامنة " + funcSymb.toString());
		}
		//funcSymb.isAwait = true;
        this.$ = {
			symb: $$[$0].symb,
			value: 'await ' + $$[$0].value
		}
    
break;
case 149:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + $$[$0-2] + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);	
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2] + '.' + $$[$0] 
		}
	
break;
case 150:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = $$[$0-2].symb.typeSymbol;
		if (!symb.isPrimitive() && !symb.isStruct && $$[$0-2].symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0] 
		}; 
	
break;
case 151:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var memberSymb;
		if (symb.typeIs('نوعبنية')) {
			// for object literals, we take symb name as member base
			memberSymb = symb.checkMember($$[$0]);
		} else {
			// for other variables, we take their symb type as member base
			//var typeSymb = yy.symbolScopes.getSymbByName(symb.type);
			var typeSymb = symb.typeSymbol;
			if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
				// calling a property without instance
				ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
			}
			memberSymb = typeSymb.checkMember($$[$0]);
		}
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0] 
		};
	
break;
case 152:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + '.' + $$[$0]
		};
	
break;
case 153:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = selfSymb.checkMember($$[$0]);
		this.$ = {
			symb,
			value: 'this.' + $$[$0]
		}
	
break;
case 154:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var symb = $$[$0-3].symb.typeSymbol.checkMember($$[$0]);
		this.$ = {
			symb,
			value: '(' + $$[$0-3].value + ').' + $$[$0]
		}
	
break;
case 155:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			symb: symb.isArray ? symb.subTypeSymbol : unknownType,
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 156:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 157:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			// type: symb.subtype, // || 'مجهول'
			//yy.symbolScopes.getSymbByName(symb.subType),
			symb: symb.isArray ? symb.subTypeSymbol : unknownType, 
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 158:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعبنية'));

		symbs.forEach((sy) => {
			symb.addMember(sy);
		});
		
		this.$ = {
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 159:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = new Symbol('');
		symb.typeSymbol = new Symbol('', yy.symbolScopes.getSymbByName('نوعبنية'));
		this.$ = {
			symb: symb,
			value: '{}'
		}
	
break;
case 160:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 161:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 162: case 163:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.createSymbol($$[$0-2]);
		symb.typeSymbol = $$[$0].symb.typeSymbol;
		symb.isArray = $$[$0].symb.isArray;
		symb.subTypeSymbol = $$[$0].symb.subTypeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 164:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منوع'),
			value: []
		}
		//ErrorManager.error("حدد نوع المصفوفة");
		//this.$ = "";
	
break;
case 165:

        this.$ = {
			symb: $$[$0].symb,
			value: [ $$[$0].value ]
		}
    
break;
case 166:

		ErrorManager.setContext(_$[$0-2], context.filePath);
        $$[$0-2].value.push($$[$0].value);
		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("نوعين غير متجانسين في المصفوفة");
		}
        this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value
		}
    
break;
case 167:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			subTypeSymbol: null,
			isArray: false
		}
	
break;
case 168:

		var symb = yy.symbolScopes.getSymbByName('مصفوفة');
		var subTypeSymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		this.$ = {
			symb: symb,
			subTypeSymbol: subTypeSymb,
			isArray: true,
		}
	
break;
case 169:

		this.$ = '...' + $$[$0].value;
	
break;
case 170:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: '!' + $$[$0].value
		}
	
break;
case 171:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 172:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = $$[$0].symb;	//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = {
			symb: symb,
			isArray: $$[$0].isArray,
			subTypeSymbol: $$[$0].subTypeSymbol
		}
	
break;
case 173:

		this.$ = {
			symb: $$[$0-1].symb,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 174: case 175: case 181:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 176:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 177:
 
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 178:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value 
		}; 
	
break;
case 179:

		// function_call
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		};
	
break;
case 180:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 182:

		// member_access
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 183:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value
		} 
	
break;
case 184:

		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 185:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}; 
	
break;
case 186:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0]
		}
	
break;
case 187:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var elemTypeSymb = $$[$0-1].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, elemTypeSymb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 188:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var elemTypeSymb = $$[$0-2].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, $$[$0].symb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-2].value.join(', ') + ']'
		}
	
break;
case 189:

		this.$ = { 
			symb: $$[$0].symb, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 190:

		this.$ = {
			symb: $$[$0].symb,
			value: '(' + $$[$0].value + ')'
		};
	
break;
case 191:

		var symb = $$[$0-2].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-2].value + ')'
		}
	
break;
case 192:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0].value
		}
	
break;
case 193:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			value: $$[$0]
		}; 
	
break;
case 194:

		var symb = yy.symbolScopes.getSymbByName($$[$0-1]);
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: $$[$0-1]
		}; 
	
break;
case 195:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('عدد'),
			value: toEnDigit($$[$0])
		}
	
break;
case 196:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'), 
			value: 'true'
		}; 
	
break;
case 197:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: 'false'
		}; 
	
break;
case 198:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['عدم'],
			value: 'null'
		}; 
	
break;
case 199:

		ErrorManager.setContext(_$[$0], context.filePath);
		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		const regex = /_{(.*?)}/g;
		var match;
		
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				inlineParse(s, context, yy);
			}
		}
		var val = $$[$0].replaceAll('"', '').replaceAll("'", "");
		var symb = yy.symbolScopes.createSymbol(val, 'نصية');
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: $$[$0].replaceAll('"', '`').replaceAll('_{', '${').replaceAll('هدا.', 'this.'),
			val: val // string value without delimiters
		}
	
break;
case 200:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.selfStack[yy.selfStack.length-1],
			value: 'this'
		}			
	
break;
case 201:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = yy.selfStack[yy.selfStack.length-1];
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: 'this'
		}; 
	
break;
case 202:

		ErrorManager.setContext(_$[$0], context.filePath);
		var result = $$[$0].replace('(', '').replace(')', '') // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
		result = processJNX(result, context, yy);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('نصية'),
			value: result
		}
	
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:$V0,11:8,12:9,13:10,27:$V1,32:$V2,37:$V3,38:$V4,53:12,56:13,58:38,60:$V5,63:39,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{1:[3]},{5:[1,44],6:45,7:5,9:6,10:$V0,11:8,12:9,13:10,27:$V1,32:$V2,37:$V3,38:$V4,53:12,56:13,58:38,60:$V5,63:39,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{1:[2,2]},o($Vh,[2,3]),{8:46,26:$Vi},o($Vh,[2,6]),{8:48,26:$Vi},{8:49,26:$Vi},o($Vh,[2,9]),{8:50,26:$Vi,95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{28:65,31:66,32:[1,67],34:[1,68]},{33:$Vx,44:$Vy,54:69},{33:$Vx,44:$Vy,54:71},{32:[1,72],41:73,43:[1,74]},o($Vz,[2,174]),o($Vz,[2,175]),o($Vz,[2,176]),o($Vz,[2,177]),o($Vz,[2,178],{138:75,33:$VA,36:[1,76]}),o($Vz,[2,180]),o($Vz,$VB,{138:78,33:$VA,36:$VC,60:$VD,79:$VE}),o($Vz,$VF,{138:82,33:$VA,36:$VG,60:$VH}),o($Vz,[2,185]),o($Vz,[2,186]),o($VI,[2,164],{118:15,106:16,111:17,121:18,122:19,126:20,104:21,105:22,129:23,133:24,135:26,139:27,137:29,132:85,13:86,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),o($Vz,[2,189]),o($Vz,[2,190]),{13:87,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vz,[2,192]),o($Vz,$VJ,{138:88,33:$VA,36:$VK,60:$VL,79:$VM}),o($Vz,[2,195]),o($Vz,[2,196]),o($Vz,[2,197]),o($Vz,[2,198]),o($Vz,[2,199]),o($Vz,[2,200],{138:92,33:$VA,36:[1,93],79:[1,94]}),o($Vz,[2,202]),{59:95,60:$VN},{59:97,60:$VN},{13:98,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{32:$VO,37:$VP,83:[1,100],130:99,131:101},{13:104,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:105,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{1:[2,1]},o($Vh,[2,4]),o($Vh,[2,5]),o($VQ,[2,25]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,10]),{13:106,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:107,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:108,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:109,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:110,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:111,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:112,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:113,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:114,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:115,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:116,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:117,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:118,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:119,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{29:[1,120]},{26:[2,27],29:[2,28],35:[1,121]},o($VR,[2,31],{33:[1,122]}),{33:[1,123]},{44:$VS,55:124},{32:$VT,39:126,57:[1,127]},{44:$VS,55:129},{33:[1,130],36:[1,132],40:[1,131],60:[2,55]},{42:133,44:[1,134]},{32:[1,135]},o($Vz,[2,179]),{32:[1,136]},{32:$VT,39:137},o($Vz,[2,182]),o($VU,$VV,{118:15,106:16,111:17,121:18,122:19,126:20,104:21,105:22,129:23,133:24,135:26,139:27,137:29,72:138,123:139,13:140,124:141,125:143,32:$VW,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),{32:[1,145]},{13:146,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vz,[2,184]),o($VU,$VV,{118:15,106:16,111:17,121:18,122:19,126:20,104:21,105:22,129:23,133:24,135:26,139:27,137:29,123:139,13:140,124:141,125:143,72:147,32:$VW,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),{32:[1,148]},{35:[1,150],80:[1,149]},o($VI,[2,165],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),{62:[1,151],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vz,[2,194]),o($VU,$VV,{118:15,106:16,111:17,121:18,122:19,126:20,104:21,105:22,129:23,133:24,135:26,139:27,137:29,123:139,13:140,124:141,125:143,72:152,32:$VW,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),{32:[1,153]},{13:154,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vz,[2,201]),{32:[1,155]},{13:156,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($VY,[2,54]),o($VU,[2,59],{61:157,64:158,65:159,77:161,32:$VZ,43:$V_,50:$V$,66:$V01}),o($VY,[2,57]),o($V11,[2,148],{100:$Vk}),{35:[1,166],83:[1,165]},o($Vz,[2,159]),o($V21,[2,160]),{44:[1,167]},{44:[1,168]},o([26,35,44,62,80,83,102],[2,169],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V11,[2,170],{100:$Vk}),o([26,35,44,62,80,83,102,107,108,109,110,112,113,114,115,116,117,119],[2,133],{95:$Vj,100:$Vk,120:$Vw}),o($V31,[2,134],{95:$Vj,100:$Vk}),o($V41,[2,123],{95:$Vj,100:$Vk,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V41,[2,124],{95:$Vj,100:$Vk,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V51,[2,125],{95:$Vj,100:$Vk,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V51,[2,126],{95:$Vj,100:$Vk,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V61,[2,127],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),o($V61,[2,128],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),o($V61,[2,129],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),o($V61,[2,130],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),o($V61,[2,131],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),o($V61,[2,132],{95:$Vj,100:$Vk,119:$Vv,120:$Vw}),{95:$Vj,100:$Vk,102:[1,169],107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($V31,[2,171],{95:$Vj,100:$Vk}),{30:170,32:[1,171],37:[1,172]},{32:[1,173]},{32:[1,174]},{32:[1,175]},o($Vh,[2,49]),{2:$V71,13:189,14:176,15:178,16:179,17:180,18:181,19:182,20:183,21:184,22:185,23:186,24:187,25:188,32:$V81,37:$V3,46:[1,177],60:$V5,71:$V91,73:$Va1,74:$Vb1,79:$V6,82:$V7,86:$Vc1,87:$Vd1,90:$Ve1,91:198,92:$Vf1,93:199,94:$Vg1,96:200,100:$Vh1,104:201,105:202,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:[2,51]},{32:$VT,39:206},o($Vi1,[2,167],{79:[1,207]}),o($Vh,[2,50]),{32:$VT,39:208},{13:209,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{32:[1,210]},o($Vh,[2,39]),{32:$VZ,43:$V_,45:211,46:$Vj1,50:$V$,75:212,76:213,77:214},{44:[2,40]},o($Vk1,[2,150]),o($Vz,[2,172]),{35:$Vl1,62:[1,215]},o($VU,[2,140]),o($VU,[2,142],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($VU,[2,143]),o([35,62,95,100,107,108,109,110,112,113,114,115,116,117,119,120],$VJ,{138:88,33:$VA,36:$VK,44:[1,217],60:$VL,79:$VM}),{59:218,60:$VN},{60:[2,147]},o($Vk1,[2,151]),{80:[1,219],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{35:$Vl1,62:[1,220]},o($Vk1,[2,152]),o($Vz,[2,187],{138:221,33:$VA}),{13:222,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vz,[2,173],{138:223,33:$VA,36:[1,224]}),{35:$Vl1,62:[1,225]},o($Vk1,[2,149]),{80:[1,226],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vk1,[2,153]),{80:[1,227],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{35:[1,229],62:[1,228]},o($VU,[2,60]),o($VU,[2,62]),{32:[1,230]},o($VU,[2,81],{78:231,40:[1,232]}),o($Vm1,$Vn1,{67:233,32:[1,234],69:$Vo1,79:[1,235]}),{32:[1,237]},{32:[1,238]},o($Vz,[2,158]),{32:$VO,37:$VP,131:239},{13:240,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:241,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:242,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{26:[2,26],36:[1,243]},o($Vp1,[2,33]),o($Vp1,[2,35]),o($VR,[2,32]),{29:[2,29]},{29:[2,30]},{2:$V71,13:189,15:245,16:179,17:180,18:181,19:182,20:183,21:184,22:185,23:186,24:187,25:188,32:$V81,37:$V3,46:[1,244],60:$V5,71:$V91,73:$Va1,74:$Vb1,79:$V6,82:$V7,86:$Vc1,87:$Vd1,90:$Ve1,91:198,92:$Vf1,93:199,94:$Vg1,96:200,100:$Vh1,104:201,105:202,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($VQ,[2,71]),o($Vq1,[2,11]),{8:246,26:$Vi},{8:247,26:$Vi},{8:248,26:$Vi},{8:249,26:$Vi},{8:250,26:$Vi},{8:251,26:$Vi},o($Vq1,[2,19]),o($Vq1,[2,20]),o($Vq1,[2,21]),{8:252,26:$Vi},{8:253,26:$Vi,95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vq1,[2,24]),{32:[1,254]},{32:[1,255]},{26:$Vj1,32:$VZ,43:$V_,45:256,50:$V$,75:212,76:213,77:214},{32:[1,257]},o($Vr1,$VJ,{138:88,32:[1,258],33:$VA,36:$VK,40:[1,260],60:$VL,79:[1,259]}),{13:261,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:262,26:[2,104],32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:$VS,55:263},{44:$VS,55:264},{44:$Vs1,97:265},o($Vr1,$VB,{138:78,33:$VA,36:$VC,40:[1,267],60:$VD,79:$VE}),o($Vr1,$VF,{138:82,33:$VA,36:$VG,40:[1,268],60:$VH}),{13:269,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{32:[1,270]},{13:271,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:[2,52]},{80:[1,272]},{26:[2,36],40:[1,273]},{26:[2,38],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{60:[2,58]},{46:[1,274]},o([26,46,83],[2,76],{35:[1,275]}),o($Vt1,[2,77]),o($Vt1,[2,79],{73:[1,276]}),o($Vu1,[2,137]),{13:140,32:$VW,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,123:277,124:141,125:143,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:278,32:$V2,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,124:279,125:143,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:[1,280]},o($Vv1,[2,157]),o($Vu1,[2,138]),o($Vz,[2,188]),o($VI,[2,166],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($Vz,[2,191]),{32:[1,281]},o($Vu1,[2,136]),o($Vv1,[2,155]),o($Vv1,[2,156]),o($VY,[2,56]),{32:$VZ,43:$V_,50:$V$,64:282,65:159,66:$V01,77:161},{60:$Vn1,67:283,69:$Vo1},o($VU,[2,82]),{13:284,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vm1,[2,83]),o($Vm1,$Vn1,{67:285,69:$Vo1}),{80:[1,286]},o([26,35,40,46,60,62,73,79,82,83],[2,65]),{67:287,69:$Vo1,79:$Vn1},{67:288,69:$Vo1,82:$Vn1},o($V21,[2,161]),o($V21,[2,162],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V21,[2,163],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($V11,[2,135],{100:$Vk}),{32:[1,289]},o($VQ,[2,70]),o($Vq1,[2,12]),o($Vq1,[2,13]),o($Vq1,[2,14]),o($Vq1,[2,15]),o($Vq1,[2,16]),o($Vq1,[2,17]),o($Vq1,[2,18]),o($Vq1,[2,22]),o($Vq1,[2,23]),{60:[1,290]},{26:[2,73]},{26:[2,74]},{26:[2,95],40:[1,291]},{26:[2,97],40:[1,292]},{13:154,32:$V2,37:$V3,60:$V5,79:$V6,80:[1,293],82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:294,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{26:[2,101],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{26:[2,103],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vq1,[2,105]),o($Vq1,[2,107]),{46:[1,297],98:295,99:296,101:298,102:$Vw1,103:299},{2:$V71,13:189,14:301,15:178,16:179,17:180,18:181,19:182,20:183,21:184,22:185,23:186,24:187,25:188,32:$V81,37:$V3,60:$V5,71:$V91,73:$Va1,74:$Vb1,79:$V6,82:$V7,86:$Vc1,87:$Vd1,90:$Ve1,91:198,92:$Vf1,93:199,94:$Vg1,96:200,100:$Vh1,104:201,105:202,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:302,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:303,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:[2,106],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{95:[1,304]},{44:[2,113],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vi1,[2,168]),{13:305,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vh,[2,41]),{32:$VZ,43:$V_,50:$V$,76:306,77:214},{32:[1,307]},o($VU,[2,141]),o($VU,[2,144],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($VU,[2,145]),{13:308,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vk1,[2,154]),o($VU,[2,61]),{60:[1,310],68:309},o($VU,[2,88],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),o($Vm1,[2,84]),{32:[1,311]},{79:[1,312]},{82:[1,313]},o($Vp1,[2,34]),o($VU,$VV,{118:15,106:16,111:17,121:18,122:19,126:20,104:21,105:22,129:23,133:24,135:26,139:27,137:29,123:139,13:140,124:141,125:143,72:314,32:$VW,37:$V3,60:$V5,66:$VX,79:$V6,82:$V7,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),{13:315,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{13:316,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{32:[1,317]},{26:[2,120],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{46:[1,319],99:318,101:320,102:$Vw1,103:299},{46:[1,321]},o($Vq1,[2,112]),{44:$Vs1,97:322},{44:$Vs1,97:323},{44:[2,119],100:[1,324]},o($Vx1,[2,117],{118:15,106:16,111:17,121:18,122:19,126:20,129:23,133:24,135:26,139:27,137:29,16:179,17:180,18:181,19:182,20:183,21:184,22:185,23:186,24:187,25:188,13:189,91:198,93:199,96:200,104:201,105:202,15:245,2:$V71,32:$V81,37:$V3,60:$V5,71:$V91,73:$Va1,74:$Vb1,79:$V6,82:$V7,86:$Vc1,87:$Vd1,90:$Ve1,92:$Vf1,94:$Vg1,100:$Vh1,127:$V8,128:$V9,134:$Va,136:$Vb,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg}),{26:[2,121],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{26:[2,122],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{13:325,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{26:[2,37],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($Vt1,[2,78]),o($Vt1,[2,80]),o($VU,[2,146],{95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw}),{33:[1,326]},o($VU,[2,67],{70:327,39:328,32:$VT}),o($Vm1,$Vn1,{67:329,69:$Vo1}),{32:[1,334],37:[1,333],81:330,84:331,85:332},{32:$VZ,43:$V_,45:335,50:$V$,75:212,76:213,77:214,83:$Vj1},{35:$Vl1,62:[1,336]},{26:[2,96],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{26:[2,99],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{26:[2,98],40:[1,337]},{46:[1,338]},o($Vq1,[2,110]),{44:$Vs1,97:339},o($Vq1,[2,111]),o($Vx1,[2,114]),{46:[2,118]},{13:340,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},{44:[2,108],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},{32:$VT,39:341},{35:[1,343],62:[1,342]},o($VU,[2,68]),o($Vm1,[2,85]),{80:[1,344]},{35:[1,345],80:[2,89]},{35:[1,346],80:[2,90]},o($VI,[2,91]),o($VI,[2,93]),{83:[1,347]},{26:[2,72]},{13:348,32:$V2,37:$V3,60:$V5,79:$V6,82:$V7,104:21,105:22,106:16,111:17,118:15,121:18,122:19,126:20,127:$V8,128:$V9,129:23,133:24,134:$Va,135:26,136:$Vb,137:29,139:27,140:$Vc,141:$Vd,142:$Ve,143:$Vf,144:$Vg},o($Vq1,[2,109]),o($Vx1,[2,115]),{44:[2,116],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($VU,[2,63]),{33:[2,66]},{32:$VT,39:349},o($Vm1,[2,86]),{37:[1,350]},{32:[1,351]},o($Vm1,[2,87]),{26:[2,100],95:$Vj,100:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,119:$Vv,120:$Vw},o($VU,[2,69]),o($VI,[2,92]),o($VI,[2,94])],
defaultActions: {3:[2,2],44:[2,1],126:[2,51],135:[2,40],144:[2,147],174:[2,29],175:[2,30],206:[2,52],210:[2,58],255:[2,73],256:[2,74],323:[2,118],336:[2,72],342:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const fs = require('fs');
    const path = require('path');
	const SymbolScopes = require('./SymbolScopes');
	const ErrorManager = require('./ErrorManager');
	const ImportManager = require('./ImportManager');
	const Symbol = require('./Symbol');
	
	function createParser (yy) {
		const parser = new Parser();
		
		// .env file's path
		var mainFilePath = path.resolve(process.argv[2]);

		// given path can be a file named مدخل.جني
		// or a folder in which case we add file مدخل.جني
		if (!mainFilePath.endsWith('مدخل.جني')) {
			if (mainFilePath.endsWith('.جني')) {
				console.error('قم بتحديد ملف بئسم مدخل.جني');
				process.exit();
			}
			mainFilePath = path.join(mainFilePath, 'مدخل.جني');
		}
		
		const projectPath = path.dirname(mainFilePath);
		//const envpath = path.join(projectPath, "/.سياق");
		
		// Either pass symbolScopes object (for inline parsing)
		// Or make a new one
		const symbolScopes = yy ? yy.symbolScopes : new SymbolScopes(); //envpath);
		
		// I use yy to pass variables to the newly created parser
		parser.yy = {
			symbolScopes: symbolScopes, // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			funcStack: yy ? yy.funcStack: [] // holder stack for current function symbol		
		}
		
		parser.originalParse = parser.parse;
		parser.parse = function (input, ctx) {
			// here we add global imports to the input source code
			// do not add global imports on inlineparses
			var fileName = path.basename(ctx.filePath, '.جني');
			input = ( ctx.inlineParse ? '' : SymbolScopes.autoImportText(fileName) ) + input;
			try {
				var result = parser.originalParse(input, ctx);
				// result is the parsed file's global scope;
				if (result.setSourceFile) {
					result.setSourceFile(fileName);
				}
				return result;
			} catch (e) {
				// exception while parsing, lets show errors
				console.log(e);
				ErrorManager.printAll();
			}
		}
		
		return parser;
	}
	
	// override default error handler
	parser.parseError = function (str, hash) {
		ErrorManager.error(
			"لم يتوقع: '" + hash.text + "'" + '\n' + str
		);
		ErrorManager.printAll();
	}
	
	function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const createParser = require('./jparser');
		const _parser = createParser(yy);
		try {
			const scope = _parser.parse(s, {
				inlineParse: true,
				filePath: context.filePath,
				projectPath: path.resolve(context.projectPath),
				outPath: context.outPath
			});
			return scope;
		} catch (e) {
			console.log(e);
			ErrorManager.printAll();
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img,ئدخال:input,سمة:style"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	function processJNX(src, context, yy) {
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = processJNXControl(src, context, yy);
		src = src.replaceAll('_{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		while (s != (
			s = s.replace(rgCond, "` + ($2 '') + `").
				replace(rgWhen, function ($0, $1, $2, $3, $4) {
					var result = inlineParse($2.replace('<x-', '<'), context, yy) + " ? `" + $4 + "` :";
					return result;
				}).replace(rgElse, "`$2` +")
		)) {}
		return '`' + s + '`';
	}

	// Utils
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }


module.exports = createParser;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return false 
break;
case 2:/* skip comments */
break;
case 3:return 144
break;
case 4:return 100
break;
case 5:return 102
break;
case 6:return 46
break;
case 7:return 141
break;
case 8:return 142
break;
case 9:return 143
break;
case 10:return 86
break;
case 11:return 38
break;
case 12:return 66
break;
case 13:return 57
break;
case 14:return 43
break;
case 15:return 50
break;
case 16:return 112
break;
case 17:return 113
break;
case 18:return 115
break;
case 19:return 117
break;
case 20:return 114
break;
case 21:return 116
break;
case 22:return 119
break;
case 23:return 120
break;
case 24:return 107
break;
case 25:return 'RETURNS'
break;
case 26:return 108
break;
case 27:return 109
break;
case 28:return 110
break;
case 29:return '%'
break;
case 30:return 60
break;
case 31:return 62
break;
case 32:return 79
break;
case 33:return 80
break;
case 34:return 82
break;
case 35:return 83
break;
case 36:return 44
break;
case 37:return 26
break;
case 38:return 35
break;
case 39:return 134
break;
case 40:return 36
break;
case 41:return 40
break;
case 42:return 69
break;
case 43:return 90
break;
case 44:return 128
break;
case 45:return 71
break;
case 46:return 73
break;
case 47:return 74
break;
case 48:return 94
break;
case 49:return 95
break;
case 50:return 92
break;
case 51:return 87
break;
case 52:return 27
break;
case 53:return 33
break;
case 54:return 'NEW'
break;
case 55:return 29
break;
case 56:return 34
break;
case 57:return 127
break;
case 58:return 136
break;
case 59:return 37 // Double quoted string
break;
case 60:return 37 // Single quoted string
break;
case 61:return 140  // Eastern Arabic numerals
break;
case 62:return 32
break;
case 63:return 140 // Western Arabic numerals
break;
case 64:return 5
break;
case 65:return 'UNKNOWN'
break;
}
},
rules: [/^(?:[ \t\v\f\r\n]+)/,/^(?:\n)/,/^(?:#[^\n]*)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا)/,/^(?:وئلا)/,/^(?:تم[ \t\v\f\r\n\%$])/,/^(?:صحيح)/,/^(?:خطئ)/,/^(?:عدم)/,/^(?:دع)/,/^(?:ئعلن)/,/^(?:دالة)/,/^(?:وعد)/,/^(?:بنية)/,/^(?:تعداد)/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو )/,/^(?:ئو )/,/^(?:\+)/,/^(?:->)/,/^(?:-)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:؟)/,/^(?:ئرجع )/,/^(?:هدا)/,/^(?:يمدد )/,/^(?:يختصر )/,/^(?:يملك )/,/^(?:لكل )/,/^(?:في )/,/^(?:طالما )/,/^(?:قل )/,/^(?:ئورد )/,/^(?:ك )/,/^(?:ئنشئ )/,/^(?:من )/,/^(?:الكل )/,/^(?:ريتما )/,/^(?:ليس )/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}