/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,45],$V3=[1,50],$V4=[1,62],$V5=[1,43],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,58],$Vg=[1,51],$Vh=[1,41],$Vi=[1,59],$Vj=[1,60],$Vk=[1,61],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,52],$Vq=[2,5,21,26,31,40,41,46,47,49,51,53,55,56,58,60,66,68,91,94,95,98,105,107,109,110,111,112,113],$Vr=[1,66],$Vs=[1,87],$Vt=[1,86],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,93],$VH=[2,31],$VI=[20,29],$VJ=[1,104],$VK=[1,107],$VL=[20,29,43,45,61,66,68,74,75,76,77,79,80,81,82,83,84,86,87,96,100],$VM=[29,96],$VN=[1,127],$VO=[1,135],$VP=[1,136],$VQ=[23,29],$VR=[1,161],$VS=[1,160],$VT=[1,176],$VU=[29,43],$VV=[2,95],$VW=[36,45],$VX=[20,29,43,45,61,68,74,75,76,77,79,80,81,82,83,84,86,87,96,100],$VY=[29,100],$VZ=[20,29,43,45,68,74,75,96,100],$V_=[20,29,43,45,68,74,75,76,77,96,100],$V$=[20,29,43,45,68,74,75,76,77,79,80,81,82,83,84,96,100],$V01=[20,29,43,45,68,74,75,76,77,79,80,81,82,83,84,86,87,96,100],$V11=[29,43,45],$V21=[46,68],$V31=[20,29,30,41,43,45,54,61,66,68,74,75,76,77,79,80,81,82,83,84,86,87,95,96,100],$V41=[1,227],$V51=[20,30],$V61=[20,29,30,43,45,61,66,68,74,75,76,77,79,80,81,82,83,84,86,87,96,100],$V71=[20,29,30,41,43,45,54,61,66,68,74,75,76,77,79,80,81,82,83,84,86,87,96,100];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"statement":6,"import_statement":7,"semic_or_nl":8,"function_def":9,"super_call":10,"shortcuts_call":11,"has_statement":12,"var_declaration":13,"say_statement":14,"return_statement":15,"while_statement":16,"for_in_statement":17,"if_statement":18,"expression":19,"؛":20,"IMPORT":21,"import_specifier":22,"FROM":23,"import_path":24,"import_list":25,"IDENTIFIER":26,"AS":27,"ALL":28,"،":29,".":30,"STRING":31,"function_decl":32,"function_ret":33,"body_block":34,"subfunc_decl":35,"=>":36,"type_decl":37,"function_decl_name":38,"function_decl_params":39,"DECL":40,"(":41,"param_list":42,")":43,"subfunc_decl_name":44,":":45,"END":46,"SUPER":47,"arg_list":48,"SHORTCUTS":49,"shortcuts_specifier":50,"HAS":51,"has_list":52,"DEF":53,"=":54,"SAY":55,"RETURN":56,"while_head":57,"WHILE":58,"for_in_head":59,"FOR":60,"IN":61,"if_head":62,"noend_block":63,"elif_clauses":64,"else_clause":65,"IF":66,"elif_head":67,"ELSE":68,"else_head":69,"assignment":70,"member_access":71,"array_access":72,"arithmetic":73,"+":74,"-":75,"×":76,"÷":77,"comparison":78,"EQ":79,"NEQ":80,"LT":81,"LTE":82,"GT":83,"GTE":84,"logical":85,"AND":86,"OR":87,"ternary":88,"function_call":89,"await_expr":90,"AWAIT":91,"new_expr":92,"NEW":93,"SELF":94,"[":95,"]":96,"object_literal":97,"{":98,"property_list":99,"}":100,"property":101,"array_elements":102,"IDENTFIER":103,"spread_operator":104,"SPREAD":105,"logical_negation":106,"NOT":107,"in_expression":108,"NUMBER":109,"TRUE":110,"FALSE":111,"NULL":112,"JNX":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"؛",21:"IMPORT",23:"FROM",26:"IDENTIFIER",27:"AS",28:"ALL",29:"،",30:".",31:"STRING",36:"=>",40:"DECL",41:"(",43:")",45:":",46:"END",47:"SUPER",49:"SHORTCUTS",51:"HAS",53:"DEF",54:"=",55:"SAY",56:"RETURN",58:"WHILE",60:"FOR",61:"IN",66:"IF",68:"ELSE",74:"+",75:"-",76:"×",77:"÷",79:"EQ",80:"NEQ",81:"LT",82:"LTE",83:"GT",84:"GTE",86:"AND",87:"OR",91:"AWAIT",93:"NEW",94:"SELF",95:"[",96:"]",98:"{",100:"}",103:"IDENTFIER",105:"SPREAD",107:"NOT",109:"NUMBER",110:"TRUE",111:"FALSE",112:"NULL",113:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[8,1],[7,4],[22,1],[22,3],[22,3],[25,1],[25,3],[24,1],[24,3],[24,1],[9,3],[9,3],[33,2],[33,0],[32,2],[38,2],[39,3],[35,2],[44,4],[42,0],[42,1],[42,2],[42,3],[42,4],[34,3],[34,2],[10,5],[11,2],[50,1],[50,3],[12,2],[52,0],[52,2],[52,1],[52,4],[52,3],[13,2],[13,4],[13,3],[13,5],[14,2],[15,2],[15,1],[16,2],[57,2],[17,2],[59,4],[18,5],[18,4],[18,4],[18,3],[62,2],[64,2],[64,3],[67,3],[63,2],[65,2],[69,1],[70,3],[70,3],[70,3],[73,3],[73,3],[73,3],[73,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[85,3],[85,3],[88,5],[89,4],[89,4],[89,4],[48,0],[48,1],[48,3],[90,2],[92,2],[71,3],[71,3],[71,3],[71,3],[71,3],[72,4],[72,4],[72,4],[97,3],[99,1],[99,3],[101,3],[101,3],[102,0],[102,2],[102,1],[102,3],[37,1],[37,4],[104,2],[106,2],[108,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,1],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var globalvars = "";
		if ($$[$0-1].includes('مدخل')) { // TODO: improve madkhal checking
			globalvars = "globalThis['سياق'] = " + yy.env;
		}
		result = globalvars + $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		let fileName = context.filePath.replace(context.projectPath, '.').replace('.جني', '.js');
		fileName = fileName.replaceAll('/', '.').replace('..', '/');
		let outFilePath = path.join(context.outPath, fileName);
		fs.writeFile(outFilePath, result, { flag: 'w+' }, (err) => {
			if (err) {
				console.log('فشل حفض الملف: ' + outFilePath);
			}
		});
		// get global scope
		var glob = yy.scopeStack.pop();
		// remove env from it
		delete glob["سياق"];
		return glob; // return global scope
    
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 7: case 9: case 10: case 11: case 12:
 this.$ = $$[$0-1]; 
break;
case 6: case 13: case 14: case 15: case 23: case 25: case 27:
 this.$ = $$[$0]; 
break;
case 8: case 17: case 37: case 49: case 95:
 this.$ = ''; 
break;
case 16:
 this.$ = $$[$0-1].value; 
break;
case 19:

		
		//var myImport = $$[$0].replace(/\"/g, '').replace(/\'/g, '');
		if (isUrlImport($$[$0])) {
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			// path should start with '//' 
			// then consider specifier as مجهول and add symbol
			if (!imp.startsWith('//')) {
				throw new Error("ئيراد عنونت لا يبدئ ب //");
			}
			if ($$[$0-2].find == 'all') {
				declareSymbol(yy, _$[$0-3], $$[$0-2].add, 'مجهول');
			}else {
				$$[$0-2].add.forEach((add) => {
					declareSymbol(yy, _$[$0-3], add, 'مجهول');
				});
			}
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";'; 
			}
		} else {
			// import is not a string
			var myFileImport = importExists($$[$0], context);

			if (myFileImport.exists) {
				// local import, build path and parse file
				processImport(yy, _$[$0-2], context, myFileImport.relativePath, $$[$0-2]);
			} else {
				// unfound locally, download from library
				// and continue just like local
				// addDownloadFromLibrary();
				myFileImport = importExists('مكون.' + $$[$0], context);
				if (myFileImport.exists) {
					processImport(yy, _$[$0-2], context, myFileImport.relativePath, $$[$0-2]);
				} else {
					throw new Error("تعدر ئيجاد الوحدة '" +  $$[$0] + "'")
				}
			}
			var imp = myFileImport.relativePath.replaceAll('/', '.').replace('.جني', '.js').replace('..', './');
			var exp = $$[$0-2].value;
			if (exp.includes('* as ')) {
				exp = '{' + exp.replace('* as ', '') + '}';
			}
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";export ' + exp;
		}
	
break;
case 20:

		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 21:
 
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 22:
 
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 24:
 
		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 26:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 28:

		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.functionStack.pop();
		
		if ($$[$0].includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
		}
		
		var extendStr = '';
		if (yy.mysuper != '') { // this class inherits
			extendStr = ' extends ' + yy.mysuper,
            yy.mysuper = '';
        }
		
		if (!selfSymb.isClass && (funcSymb.type != $$[$0-1].type)) {
			throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "نوع الئرجاع غير متوافق في الوضيفة '" + funcSymb.name + " <" + funcSymb.type + ">'");
		}
		
		if ($$[$0-2].funcname == 'مدخل') { // self exec main function
			this.$ = '(function ' + $$[$0-2].funcname + $$[$0-2].params + $$[$0] + ')()'; 
		} else if (yy.myshortcut != '') { // this is a shortcut
			this.$ = $$[$0-2].exportStr + 'const ' + $$[$0-2].funcname + '=' + yy.myshortcut + ';'
				+ $$[$0-2].funcname + '.prototype || (' + $$[$0-2].funcname + '.prototype = {});'
				+ $$[$0].slice(1,-1); // remove first and last { }
			yy.myshortcut = '';
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if ($$[$0-1].type) {
				throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "لا يجب تحديد نوع ئرجاع لصنف.");
			}
			this.$ = $$[$0-2].exportStr + 'class ' + $$[$0-2].funcname + extendStr + '{constructor' + $$[$0-2].params + $$[$0] + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isawait ? 'async ' : '';
			this.$ = $$[$0-2].exportStr + asyncStr + 'function ' + $$[$0-2].funcname + $$[$0-2].params + $$[$0];
		}
	
break;
case 29:

		var funcSymb = yy.functionStack.pop();
		if (funcSymb.type != $$[$0-1].type) {
			throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "نوع الئرجاع غير متوافق في الوضيفة '" + funcSymb.name + " <" + funcSymb.type + ">'");
		}
		if (yy.myshortcut != '') {
			var result = $$[$0-2].objname + '.prototype.' + $$[$0-2].funcname + '=' + $$[$0-2].objname + '.prototype.' + yy.myshortcut + ';';
			result += $$[$0-2].objname + '.' + $$[$0-2].funcname + '=' + $$[$0-2].objname + '.' + yy.myshortcut + ';';
			this.$ = result;
			yy.myshortcut = '';
		} else {
			var asyncStr = funcSymb.isawait ? 'async ' : '';
			this.$ = $$[$0-2].objname + '.prototype.' + $$[$0-2].funcname + '=' + $$[$0-2].objname + '.' + $$[$0-2].funcname + '=' + asyncStr + 'function' + $$[$0-2].value + $$[$0];
		}
	
break;
case 30:

		// $$[$0] = { type, subtype }
		this.$ = {
			type: $$[$0].type,
			subtype: $$[$0].subtype
		}
	
break;
case 31:

		this.$ = {
			type: null
		}
	
break;
case 32:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0],
			value: $$[$0-1].value + $$[$0] // TODO unused
		}
	
break;
case 33:

		var mySymb = declareSymbol(yy, _$[$0-1], $$[$0], $$[$0]);
		yy.selfStack.push(mySymb);
		yy.functionStack.push(mySymb);
		enterScope(yy);
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 34:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 35:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 36:

		var mySymb = checkSymbol(yy, $$[$0-2], _$[$0-3]);
		yy.selfStack.push(mySymb);
		enterScope(yy);
		var mySymb2 = declareMember(yy, mySymb, { name: $$[$0], type: 'عدم' });
		yy.functionStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 38:

		declareSymbol(yy, _$[$0], $$[$0], 'منوع');
		this.$ = $$[$0]; 
	
break;
case 39:

		declareSymbol(yy, _$[$0-1], $$[$0].type, $$[$0-1]);
		this.$ = $$[$0];
	
break;
case 40:

		declareSymbol(yy, _$[$0-2], $$[$0], 'منوع');
		this.$ = $$[$0-2] + ',' + $$[$0]; 
	
break;
case 41:

		declareSymbol(yy, _$[$0-3], $$[$0].type, $$[$0-1]);
		this.$ = $$[$0-3] + ',' + $$[$0];
	
break;
case 42:

		exitScope(yy);
		this.$ = '{' + $$[$0-1].filter(Boolean).join(';') + '}';
	
break;
case 43:

		exitScope(yy);
		this.$ = '{}';
	
break;
case 44:

		var superSymb = checkSymbol(yy, $$[$0-3], _$[$0-3]);
        yy.mysuper = $$[$0-3];
		// copy super members to self members
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		for (var key in superSymb.members) {
			selfSymb.members[key] = superSymb.members[key]
		}
		selfSymb.isClass = true;
		//this.$ = 'Reflect.construct(' + $$[$0-3] + ', [' + $$[$0-1] + '], new.target || ' + selfSymb.name + ')';
		//this.$ = 'super(' + $$[$0-1] + ')';
        //this.$ = $$[$0-3] + '.call(this' + ($$[$0-1] ? ', ' + $$[$0-1] : '') + ')';
		// if this class already shortcuts, then don't call super()
		if (yy.myshortcut != '') {
			this.$ = '';
		}else {
			this.$ = 'super(' + $$[$0-1] + ')';
		}
    
break;
case 45:

		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.functionStack[yy.functionStack.length-1];
		yy.myshortcut = $$[$0].identifier;
		if (selfSymb.name == funcSymb.name) { // we are in an object
			var superSymb = checkSymbol(yy, $$[$0].identifier, _$[$0]);
			selfSymb.myshortcut = $$[$0].identifier;
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			// copy origi members to self members if we are in a class
			for (var key in superSymb.members) {
				selfSymb.members[key] = superSymb.members[key]
			}
		} else { // we are in a subfunction
			// if there is no AS TYPE then error
			if (!$$[$0].astype) {
				throw new Error("سطر: " + _$[$0-1].first_line + "\n" + "يلزم تحديد نوع الئختصار في الوضيفة '" + funcSymb.name + "' ");
			}
			var superSymb;
			if (!selfSymb.myshortcut) {
				// parent not shortcuting
				superSymb = checkMember(yy, selfSymb, $$[$0].identifier, _$[$0-1]);
			} else {
				// parent have a shortcut
				superSymb = checkMember(yy, selfSymb.myshortcut, $$[$0], _$[$0-1]);
			}
			// function type is the one specified in AS TYPE
			funcSymb.type = $$[$0].astype;
		}
	
break;
case 46:

		this.$ = {
			identifier: $$[$0]
		}
	
break;
case 47:

		this.$ = {
			identifier: $$[$0-2],
			astype: $$[$0]
		}
	
break;
case 48:

		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true;
		var names = $$[$0].split(',');
		var result = '';
		var thisStr = 'this';
		if (yy.myshortcut != '') {
			thisStr = selfSymb.name + '.prototype';
		}
		names.forEach((param) => {
			param = param.split(' ');
			var name = param[1] || param[0];
			var type = param.length > 1 ? param[0] : 'منوع';
			declareMember(yy, selfSymb, {name: name, type: type}, _$[$0-1]);
			// declare setters & getters
			var setter = 'خد' + name;
			var getter = 'رد' + name;
			//declareMember(yy, selfSymb, {name: setter, type: 'مجهول'}, _$[$0-1]);
			//declareMember(yy, selfSymb, {name: getter, type: 'مجهول'}, _$[$0-1]);
			result += `Object.defineProperty(${selfSymb.name}.prototype, '${name}', {get: function() {return this.${getter}()}, set: function(value) {this.${setter}(value)} });`;
			result += `${thisStr}.${setter} = function (value) { this._${name} = value; };`;
			result += `${thisStr}.${getter} = function () { return this._${name}; };`;
		});
		this.$ = result;
	
break;
case 50:

		this.$ = $$[$0-1] + ' ' + $$[$0];
	
break;
case 51:

		//declareSymbol(yy, _$[$0], $$[$0], 'مجهول');
		this.$ = $$[$0]; 
	
break;
case 52:

		this.$ = $$[$0-3] + ',' + $$[$0-1] + ' ' + $$[$0];
	
break;
case 53:

		//declareSymbol(yy, _$[$0-2], $$[$0], 'مجهول');
		this.$ = $$[$0-2] + ',' + $$[$0]; 
	
break;
case 54:

		// دع ب
		declareSymbol(yy, _$[$0-1], $$[$0], 'منوع');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 55:

		// دع ب = 4
		declareSymbol(yy, _$[$0-3], $$[$0-2], $$[$0].type);
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 56:

		// دع عدد ب
		declareSymbol(yy, _$[$0-2], $$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 57:

		// دع عدد ب = 4
		if ($$[$0-3] != $$[$0-1].type) {
			// type mismatch
			throw new Error("سطر: " + _$[$0-4].first_line + "\n" + "محاولة ئسناد '" + $$[$0-1].type + "' ئلا '" + $$[$0-3] + "'");
		}
		declareSymbol(yy, _$[$0-4], $$[$0-2], $$[$0-3]);
		this.$ = 'let ' + $$[$0-3] + ' = ' + $$[$0-1].value;
	
break;
case 58:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 59:

		var funcSymb = yy.functionStack[yy.functionStack.length-1];
		funcSymb.type = $$[$0].type;
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 60:

		var funcSymb = yy.functionStack[yy.functionStack.length-1];
		funcSymb.type = "عدم";
		this.$ = 'return'; 
	
break;
case 61: case 63:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 62:
 
		enterScope(yy);
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 64:

		enterScope(yy);
		declareSymbol(yy, _$[$0-3], $$[$0-2], $$[$0].type);
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 65:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 66: case 67:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 68:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 69:

		enterScope(yy);
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 70: case 71: case 74:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 72:

		enterScope(yy);
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 73:

		exitScope(yy);
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 75:

		enterScope(yy);
		this.$ = 'else';
	
break;
case 76:

		var mySymb = checkSymbol(yy, $$[$0-2], _$[$0-2]);
		if (mySymb.type != 'منوع' && (mySymb.type != $$[$0].type)) {
			// type mismatch
			throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "محاولة ئسناد '" + '<' + $$[$0].type + ">' ئلا '" + mySymb.name + ' <' + mySymb.type + ">'");
		}
		if ($$[$0].symb && $$[$0].symb.type == 'كائن') {
			// expression is an object literal
			// add members to identifier's symbol
			mySymb.members = $$[$0].symb.members;
			// mySymb.type = $$[$0].symb.type;
		}
		this.$ = {
			type: mySymb.type,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 77:

		if ($$[$0-2].symb) {
			if ($$[$0-2].symb.type != 'منوع' && ($$[$0-2].symb.type != $$[$0].type)) {
				throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "محاولة ئسناد '" + '<' + $$[$0].type + ">' ئلا '" + $$[$0-2].symb.name + ' <' + $$[$0-2].symb.type + ">'");
			}
			if ($$[$0].symb && $$[$0].symb.type == 'كائن') {
				// expression is an object literal
				// add members to the assigned symbol
				$$[$0-2].symb.members = $$[$0].symb.members;
			}

			// $$[$0-2].symb.type = $$[$0].type
		}
		this.$ = {
			type: $$[$0].type,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 78:

		this.$ = {
			type: $$[$0].type,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 79:

		this.$ = {
			type: $$[$0-2].type,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 80:
 
		this.$ = {
			type: $$[$0-2].type,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 81:
 
		this.$ = {
			type: $$[$0-2].type,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 82:
 
		this.$ = {
			type: $$[$0-2].type,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 83:

		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 84:
 
		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 85:
 
		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 86:
 
		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 87:
 
		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 88:
 
		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 89:

		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 90:

		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 91:

		// TODO: add probable type $$[$0-4] or $$[$0]
		// for now type checking will be ignored for ternary
        this.$ = {
			type: 'مجهول',
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 92:

		var symb = checkSymbol(yy, $$[$0-3], _$[$0-3]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			type: symb.type,
			value: newStr + $$[$0-3] + '(' + $$[$0-1] + ')'
		}
	
break;
case 93:

		// TODO: check if member_access is a function
		// TODO: maybe add isFunction to symbolTable
		this.$ = {
			symb: $$[$0-3].symb,
			type: $$[$0-3].type,
			value: $$[$0-3].value + '(' + $$[$0-1] + ')'
		}
	
break;
case 94:

		this.$ = {
			type: $$[$0-3].type,
			value: $$[$0-3].value + '(' + $$[$0-1] + ')'
		}
	
break;
case 96:
 
		this.$ = $$[$0].value; 
	
break;
case 97:
 
		this.$ = $$[$0-2] + ', ' + $$[$0].value
	
break;
case 98:

		var funcSymb = yy.functionStack[yy.functionStack.length-1];
		funcSymb.isawait = true;
        this.$ = {
			type: $$[$0].type,
			value: 'await ' + $$[$0].value
		}
    
break;
case 99:

		this.$ = {
			type: $$[$0].type,
			value: 'new ' + $$[$0].value
		}
	
break;
case 100:

		var type = checkSymbol(yy, $$[$0-2], _$[$0-2]).type;
		var symb = checkMember(yy, $$[$0-2], $$[$0], _$[$0]);
		type = symb.type;
		this.$ = {
			symb: symb,
			type, 
			value: $$[$0-2] + '.' + $$[$0] 
		}
	
break;
case 101:

		var type = $$[$0-2].type;
		var symb = checkMember(yy, type, $$[$0], _$[$0]);
		type = symb.type;
		this.$ = {
			symb: symb,
			type, 
			value: $$[$0-2].value + '.' + $$[$0] 
		}; 
	
break;
case 102:

		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var symb2;
		if (symb.type == 'كائن') {
			// for object literals, we take symb name as member base
			symb2 = checkMember(yy, symb, $$[$0], _$[$0]);
		} else {
			// for other variables, we take their symb type as member base
			symb2 = checkMember(yy, symb.type, $$[$0], _$[$0]);
		}
		var type = symb2.type;
		this.$ = {
			symb: symb2,
			type, 
			value: $$[$0-2].value + '.' + $$[$0] 
		};
	
break;
case 103:

		this.$ = {
			symb: null, // TODO: may cause problems
			type: $$[$0-2].type,
			value: $$[$0-2].value + '.' + $$[$0]
		};
	
break;
case 104:

		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = checkMember(yy, selfSymb, $$[$0], _$[$0]);
		var type = symb.type;
		this.$ = {
			symb,
			type,
			value: 'this.' + $$[$0]
		}
	
break;
case 105:

		var symb = checkSymbol(yy, $$[$0-3], _$[$0-3]);
		if (!['مصفوفة', 'منوع', 'كائن'].includes(symb.type)) {
			throw new Error("سطر: " + _$[$0-3].first_line + "\n" + "تعدر ولوج عنصر مصفوفة من '" + symb.name + " <" + symb.type + ">'");
		}
		this.$ = {
			type: symb.subtype || 'مجهول', //'مجهول', // we don't currently check types of array elements
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 106:

		this.$ = {
			type: 'مجهول',
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 107:

		var symb = $$[$0-3].symb;
		if (!['مصفوفة', 'منوع', 'كائن'].includes(symb.type)) {
			throw new Error("سطر: " + _$[$0-3].first_line + "\n" + "تعدر ولوج عنصر مصفوفة من '" + symb.name + " <" + symb.type + ">'");
		}
		this.$ = {
			type: symb.subtype || 'مجهول', // we don't currently check types of array elements
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 108:

		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var members = {};
		symbs.forEach((sy) => {
			members[sy.name] = sy;
		});
		var symb = { name: '', type: 'كائن', members };
		this.$ = {
			type: symb.type,
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 109:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 110:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 111:

		//declareMember(currentAssign, { name: $$[$0-2], type: $$[$0].type }, _$[$0-2]);	
		var symb = { name: $$[$0-2], type: $$[$0].type, members: {} }
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 112:

		//declareMember(currentAssign, { name: $$[$0-2], type: $$[$0].type }, _$[$0-2]);
		var symb = { name: $$[$0-2], type: $$[$0].type, members: {} }
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 113:

		throw new Error("سطر: " + _$[$0].first_line + "\n" + "حدد نوع المصفوفة");
		this.$ = "";
	
break;
case 114:

		var symb = checkSymbol(yy, $$[$0], _$[$0-1]);
		this.$ = {
			type: symb.type,
			value: []
		}
	
break;
case 115:

        this.$ = {
			type: $$[$0].type,
			value: [ $$[$0].value ]
		}
    
break;
case 116:

        $$[$0-2].value.push($$[$0].value);
		if ($$[$0-2].type != $$[$0].type) {
			throw new Error("سطر: " + _$[$0-2].first_line + "\n" + "نوعين غير متجانسين في المصفوفة.");
		}
        this.$ = {
			type: $$[$0-2].type,
			value: $$[$0-2].value
		}
    
break;
case 117:

		this.$ = {
			type: $$[$0]
		}
	
break;
case 118:

		this.$ = {
			type: $$[$0-3],
			subtype: $$[$0-1]
		}
	
break;
case 119:

		this.$ = '...' + $$[$0].value;
	
break;
case 120:

		this.$ = {
			type: 'منطق',
			value: '!' + $$[$0].value
		}
	
break;
case 121:

		this.$ = {
			type: 'منطق',
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 122: case 123: case 125:

		this.$ = {
			type: $$[$0].type,
			value: $$[$0].value
		}
	
break;
case 124:

		this.$ = {
			type: $$[$0].type,
			value: $$[$0].value
		} 
	
break;
case 126:
 
		this.$ = {
			type: $$[$0].type,
			value: $$[$0].value
		} 
	
break;
case 127:

		this.$ = { 
			type: $$[$0].type, 
			value: $$[$0].value 
		}; 
	
break;
case 128:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			type: $$[$0].type,
			value: $$[$0].value
		}
	
break;
case 129:

		this.$ = {
			symb: $$[$0].symb,
			type: $$[$0].type,
			value: $$[$0].value
		}
	
break;
case 130:

		this.$ = { 
			type: $$[$0].type, 
			value: $$[$0].value
		} 
	
break;
case 131:

		this.$ = {
			symb: $$[$0].symb,
			type: $$[$0].type, 
			value: $$[$0].value
		}; 
	
break;
case 132:

		this.$ = {
			type: 'مجهول',
			value: $$[$0]
		}
	
break;
case 133:

		this.$ = {
			type: 'مصفوفة',
			subtype: $$[$0-1].type,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 134:

		this.$ = { 
			type: $$[$0].type, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 135:

		this.$ = {
			symb: $$[$0-1].symb,
			type: $$[$0-1].type,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 136:

		this.$ = {
			type: 'منطق',
			value: $$[$0].value
		}
	
break;
case 137:

		var symb = checkSymbol(yy, $$[$0], _$[$0]);
		this.$ = {
			symb: symb,
			type: symb.type, 
			value: $$[$0]
		}; 
	
break;
case 138:

		this.$ = {
			type: 'عدد',
			value: toEnDigit($$[$0])
		}
	
break;
case 139:

		this.$ = {
			type: 'منطق', 
			value: 'true'
		}; 
	
break;
case 140:

		this.$ = {
			type: 'منطق', 
			value: 'false'
		}; 
	
break;
case 141:

		this.$ = {
			type: 'عدم', 
			value: 'null'
		}; 
	
break;
case 142:

		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		const regex = /{(.*?)}/g;
		var match;
		
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				inlineParse(s, context, yy);
			}
		}
		this.$ = {
			type: 'نص',
			value: $$[$0].replaceAll('"', '`').replaceAll('{', '${')
		}
	
break;
case 143:

		this.$ = {
			type: yy.selfStack[yy.selfStack.length-1].type,
			value: 'this'
		}			
	
break;
case 144:

		var result = $$[$0].replace('(', '').replace(')', '') // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
		result = processJNX(result, context, yy);
		this.$ = {
			type: 'نص',
			value: result
		}
	
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:$V1,26:$V2,31:$V3,32:19,35:20,38:53,40:$V4,41:$V5,44:54,47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,57:27,58:$Vc,59:28,60:$Vd,62:29,66:$Ve,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{1:[3]},{2:$V0,5:[1,63],6:64,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:$V1,26:$V2,31:$V3,32:19,35:20,38:53,40:$V4,41:$V5,44:54,47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,57:27,58:$Vc,59:28,60:$Vd,62:29,66:$Ve,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{1:[2,2]},o($Vq,[2,3]),{8:65,20:$Vr},o($Vq,[2,6]),{8:67,20:$Vr},{8:68,20:$Vr},{8:69,20:$Vr},{8:70,20:$Vr},{8:71,20:$Vr},{8:72,20:$Vr},o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),{8:73,20:$Vr,61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($Vq,[2,17]),{22:88,25:89,26:[1,90],28:[1,91]},{33:92,36:$VG,45:$VH},{33:94,36:$VG,45:$VH},{26:[1,95]},{26:[1,97],50:96},o($VI,[2,49],{52:98,26:[1,99]}),{26:[1,100]},{19:101,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:102,20:[2,60],26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{34:103,45:$VJ},{34:105,45:$VJ},{45:$VK,63:106},o($VL,[2,122]),o($VL,[2,123]),o($VL,[2,124]),o($VL,[2,125]),o($VL,[2,126]),o($VL,[2,127],{30:[1,108]}),o($VL,[2,128]),o($VL,[2,129],{30:[1,111],41:[1,110],54:[1,109],95:[1,112]}),o($VL,[2,130],{30:[1,115],41:[1,114],54:[1,113]}),o($VL,[2,131]),o($VL,[2,132]),o($VM,[2,113],{70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,102:116,19:118,26:$V2,27:[1,117],31:$V3,41:$V5,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),o($VL,[2,134]),{19:119,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VL,[2,136]),o($VL,[2,137],{30:[1,122],41:[1,121],54:[1,120],95:[1,123]}),o($VL,[2,138]),o($VL,[2,139]),o($VL,[2,140]),o($VL,[2,141]),o($VL,[2,142]),o($VL,[2,143],{30:[1,124],95:[1,125]}),o($VL,[2,144]),{39:126,41:$VN},{39:128,41:$VN},{19:129,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:[1,130]},{19:131,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:132,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:$VO,31:$VP,99:133,101:134},{19:137,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:138,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:[1,139]},{1:[2,1]},o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,18]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,16]),{19:140,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:141,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:142,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:143,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:144,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:145,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:146,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:147,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:148,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:149,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:150,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:151,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:152,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:153,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{23:[1,154]},{23:[2,20],29:[1,155]},o($VQ,[2,23],{27:[1,156]}),{27:[1,157]},{34:158,45:$VJ},{26:$VR,37:159,103:$VS},{34:162,45:$VJ},{41:[1,163]},{20:[2,45]},{20:[2,46],27:[1,164]},{20:[2,48],29:[1,165]},o($VI,[2,51],{26:[1,166]}),{20:[2,54],26:[1,168],54:[1,167]},{20:[2,58],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},{20:[2,59],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($Vq,[2,61]),{2:$V0,4:169,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:$V1,26:$V2,31:$V3,32:19,35:20,38:53,40:$V4,41:$V5,44:54,46:[1,170],47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,57:27,58:$Vc,59:28,60:$Vd,62:29,66:$Ve,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($Vq,[2,63]),{46:[1,173],64:171,65:172,67:174,68:$VT,69:175},{2:$V0,4:177,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:$V1,26:$V2,31:$V3,32:19,35:20,38:53,40:$V4,41:$V5,44:54,47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,57:27,58:$Vc,59:28,60:$Vd,62:29,66:$Ve,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:[1,178]},{19:179,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VU,$VV,{70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,48:180,19:181,26:$V2,31:$V3,41:$V5,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),{26:[1,182]},{19:183,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:184,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VU,$VV,{70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,19:181,48:185,26:$V2,31:$V3,41:$V5,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),{26:[1,186]},{29:[1,188],96:[1,187]},{26:[1,189]},o($VM,[2,115],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),{43:[1,190],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},{19:191,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VU,$VV,{70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,19:181,48:192,26:$V2,31:$V3,41:$V5,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),{26:[1,193]},{19:194,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:[1,195]},{19:196,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VW,[2,32]),o($VU,[2,37],{42:197,26:[1,198]}),o($VW,[2,35]),{45:[2,62],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},{61:[1,199]},{45:[2,69],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($VX,[2,98],{66:$Vt}),{29:[1,201],100:[1,200]},o($VY,[2,109]),{45:[1,202]},{45:[1,203]},o([20,29,43,45,68,96,100],[2,119],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($VX,[2,120],{66:$Vt}),{30:[1,204],41:[2,33]},o($VZ,[2,79],{61:$Vs,66:$Vt,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($VZ,[2,80],{61:$Vs,66:$Vt,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($V_,[2,81],{61:$Vs,66:$Vt,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($V_,[2,82],{61:$Vs,66:$Vt,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($V$,[2,83],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V$,[2,84],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V$,[2,85],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V$,[2,86],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V$,[2,87],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V$,[2,88],{61:$Vs,66:$Vt,86:$VE,87:$VF}),o($V01,[2,89],{61:$Vs,66:$Vt}),o($V01,[2,90],{61:$Vs,66:$Vt}),{61:$Vs,66:$Vt,68:[1,205],74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($VX,[2,121],{66:$Vt}),{24:206,26:[1,207],31:[1,208]},{26:[1,209]},{26:[1,210]},{26:[1,211]},o($Vq,[2,28]),{45:[2,30]},o($V11,[2,117]),{95:[1,212]},o($Vq,[2,29]),o($VU,$VV,{70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,19:181,48:213,26:$V2,31:$V3,41:$V5,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),{26:[1,214]},{26:[1,215]},o($VI,[2,50]),{19:216,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{20:[2,56],54:[1,217]},{2:$V0,6:64,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:$V1,26:$V2,31:$V3,32:19,35:20,38:53,40:$V4,41:$V5,44:54,46:[1,218],47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,57:27,58:$Vc,59:28,60:$Vd,62:29,66:$Ve,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($Vq,[2,43]),{46:[1,220],65:219,67:221,68:$VT,69:175},{46:[1,222]},o($Vq,[2,68]),{45:$VK,63:223},{45:$VK,63:224},{45:[2,75],66:[1,225]},o($V21,[2,73],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,32:19,35:20,57:27,59:28,62:29,70:30,73:31,78:32,85:33,88:34,89:35,90:36,71:37,72:38,97:39,104:40,106:42,108:44,38:53,44:54,6:64,2:$V0,21:$V1,26:$V2,31:$V3,40:$V4,41:$V5,47:$V6,49:$V7,51:$V8,53:$V9,55:$Va,56:$Vb,58:$Vc,60:$Vd,66:$Ve,91:$Vf,94:$Vg,95:$Vh,98:$Vi,105:$Vj,107:$Vk,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp}),o($V31,[2,101]),o($VX,[2,77],{66:$Vt}),{29:$V41,43:[1,226]},o($VU,[2,96],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($V31,[2,102]),{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF,96:[1,228]},o($VX,[2,78],{66:$Vt}),{29:$V41,43:[1,229]},o($V31,[2,103]),o($VL,[2,133]),{19:230,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VM,[2,114]),o($VL,[2,135]),o($VX,[2,76],{66:$Vt}),{29:$V41,43:[1,231]},o($V31,[2,100]),{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF,96:[1,232]},o($V31,[2,104]),{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF,96:[1,233]},{29:[1,235],43:[1,234]},o($VU,[2,38],{37:236,26:$VR,103:$VS}),{19:237,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($VL,[2,108]),{26:$VO,31:$VP,101:238},{19:239,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{19:240,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{26:[1,241]},{19:242,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},{20:[2,19],30:[1,243]},o($V51,[2,25]),o($V51,[2,27]),o($VQ,[2,24]),{23:[2,21]},{23:[2,22]},{26:[1,244]},{29:$V41,43:[1,245]},{20:[2,47]},o($VI,[2,53],{26:[1,246]}),{20:[2,55],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},{19:247,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($Vq,[2,42]),{46:[1,248]},o($Vq,[2,66]),{45:$VK,63:249},o($Vq,[2,67]),o($V21,[2,70]),{46:[2,74]},{19:250,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($V61,[2,93]),{19:251,26:$V2,31:$V3,41:$V5,70:30,71:37,72:38,73:31,78:32,85:33,88:34,89:35,90:36,91:$Vf,94:$Vg,95:$Vh,97:39,98:$Vi,104:40,105:$Vj,106:42,107:$Vk,108:44,109:$Vl,110:$Vm,111:$Vn,112:$Vo,113:$Vp},o($V71,[2,107]),o($V61,[2,94]),o($VM,[2,116],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($V61,[2,92]),o($V71,[2,105]),o($V71,[2,106]),o($VW,[2,34]),{26:[1,252]},o($VU,[2,39]),{45:[2,64],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($VY,[2,110]),o($VY,[2,111],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($VY,[2,112],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),{41:[2,36]},o($VX,[2,91],{66:$Vt}),{26:[1,253]},{96:[1,254]},{20:[2,44]},o($VI,[2,52]),{20:[2,57],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($Vq,[2,65]),o($V21,[2,71]),{45:[2,72],61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF},o($VU,[2,97],{61:$Vs,66:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,86:$VE,87:$VF}),o($VU,[2,40],{37:255,26:$VR,103:$VS}),o($V51,[2,26]),o($V11,[2,118]),o($VU,[2,41])],
defaultActions: {3:[2,2],63:[2,1],96:[2,45],159:[2,30],210:[2,21],211:[2,22],214:[2,47],224:[2,74],241:[2,36],245:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const fs = require('fs');
    const path = require('path');
	//const _parser = require('./jparser');
	const globalSymb = { name: 'العام', type: 'العام', members: {} };
	var importPath;
	var result;
	var mustImp = ["كائن", "منطق", "نص", "مصفوفة"]; // automatic imports
	
	
	function createParser (yy) {
		const parser = new Parser();
		// read .env file
		const mainFilePath = process.argv[2];
		const projectPath = path.dirname(mainFilePath);
		const envpath = path.join(projectPath, "/.سياق");
		var scope = {
			'سياق': {name: 'سياق', type: 'سياق', members: {} },
			'العام': globalSymb
		};
		if (!yy) { // no yy, means new parser without context
			var env = "";
			try {
				env = fs.readFileSync(envpath, 'utf8');
			} catch (e) {}
			try {
				env = JSON.parse('{' + env.replaceAll('\n', ',') + '}');
			} catch (e) {
				throw new Error('علا .سياق ئن يكون بصيغة: "متغير": "قيمة"');
			}
			for (var key in env) {
				if (env[key] == "") { 
					// empty context vars are considered nulls
					env[key] = null;
				}
				scope["سياق"].members[key] = {name: key, type: "نص", members: {}}
			}
		}
		parser.yy = {
			scopeStack: yy ? yy.scopeStack : [scope], // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			functionStack: yy ? yy.functionStack : [], // holder stack for current function
			mysuper: '', // super holder if current function inherits
			myshortcut: '', // shortcut holder if current function shortcuts another
			isawait: false, // if current function contains await, TODO: unused, remove it
			env: JSON.stringify(env) // environment variables (سياق)
		}
		
		parser.originalParse = parser.parse;
		parser.parse = function (input, ctx) {
			// do not add global imports on inlineparses
			input = (ctx.inlineParse ? '' : globalImport(ctx.filePath)) + input;
			return parser.originalParse(input, ctx);
		}
		
		return parser;
	}

	// override default error handler
    parser.parseError = function (str, hash) {
		let errorMessage = "خطئ نحوي سطر: " + hash?.loc?.first_line;
		errorMessage += "\nلم يتوقع: '" + hash.text + "'";
		errorMessage += "\n" + str;
        throw new Error(errorMessage);
    }

	// symbol table logic
	
	function enterScope(yy) {
		yy.scopeStack.push({});
	}
	
	function exitScope(yy) {
		yy.scopeStack.pop();
	}
	
	function declareSymbol(yy, ctx, name, type, members = {}, isClass = false) {
		var currentScope = yy.scopeStack[yy.scopeStack.length-1];
		if (currentScope[name]) {
			throw new Error("ال" + type + " '" + name + "' معررف مسبقا.");
		}
		// isClass is false by default
		// a function becomes class when having: has, super, extends, shortcut?
		if (name != type) {
			// this is a variable of type
			var smb = checkSymbol(yy, type, ctx);
			members = smb.members;
		}
		currentScope[name] = { name: name, type: type, members: members, isClass: isClass };
		return currentScope[name];
	}
	
	function checkSymbol(yy, name, ctx) {
		if (['مجهول', 'فارغ', 'كائن', 'منوع', 'عدم'].includes(name)) {
			return { type: name, name: name }
		}
		for (var i=yy.scopeStack.length-1; i >=0; i--) {
			if (yy.scopeStack[i][name]) {
				return yy.scopeStack[i][name];
			}
		}
		console.log(ctx);
		throw new Error("سطر: " + ctx?.first_line + "\n" + "الئسم '" + name + "' غير معروف.");
	}
	
	function declareMember(yy, object, member, ctx) {
		let name = object.name || object;		
		let symb = checkSymbol(yy, name, ctx);
		if (symb.members[member]) {
			throw new Error("الئسم '" + member + "' معررف مسبقا في الكائن " + name + "'.");
		}
		checkSymbol(yy, member.type, ctx);
		symb.members[member.name] = { name: member.name, type: member.type, members: (member.members || {}) };
		return symb.members[member.name];
	}
	
	function checkMember(yy, object, member, ctx) {
		let name = object.name || object;
		var symb;
		if (object.type && object.type == 'كائن') {
			symb = object; // when its an object literal, we don't check type symbol, we only check variable members
		} else {
			symb = checkSymbol(yy, name, ctx); // check symbol of base object
		}
		if (symb.type && ['مجهول', 'منوع'].includes(symb.type)) {
			// غض الطرف عن النوعين مجهول ومنوع
			return {type: symb.type, name: member};
		}
		if (!symb.members[member]) {
			if (name == 'العام') {
				throw new Error("سطر: " + ctx?.first_line + "\n" + "الئسم '" + member + "' غير معروف.");
			} else {
				throw new Error("سطر: " + ctx?.first_line + "\n" + "الئسم '" + member + "' غير معروف في الكائن " + name + " <" + symb.type + ">.");
			}
		}
		return symb.members[member];
	}

	// imports logic
	
	// unused function TO REMOVE
	function checkImportFile(s) {
		var splited = s.split('/');
		var lastPart = splited[splited.length-1];
		if (!lastPart.includes('.')) {
			// no extension add default
			return s + '/' + lastPart + '.جني';
		}
		return s;
	}
	
	function importExists(s, context) {
		// find a file like ./name.js
		// or like /name/name.js
		//var myFileImport = myImport.replace('.', '/') + '.js';
		var splitted = s.split('.');
		var name = splitted[splitted.length-1]; // last part is file name
		var myImport = s.replace('.', '/');
		
		//imports are relative to project path not current file
		//var fileBase = path.dirname(context.filePath);
		var fileBase = context.projectPath;
		
		var filePath1 = path.join(fileBase, myImport + '.جني');
		var filePath2 = path.join(fileBase, myImport, name + '.جني');

		try {
			fs.statSync(filePath1);
			return {
				exists: true,
				path: filePath1,
				relativePath: '.' + filePath1.replace(context.projectPath, '')
				//relativePath: './' + myImport + '.جني'
			}
		} catch (err) {}
		try {		
			fs.statSync(filePath2);
			return {
				exists: true,
				path: filePath2,
				relativePath: '.' + filePath2.replace(context.projectPath, '')
				//relativePath: './' + path.join(myImport, name + '.جني')
			}
		} catch (err) {}
		return {
			exists: false
		}
	}
	
	function processImport(yy, meta, context, importString, importSpecifier) {
		var fileBase = path.dirname(context.filePath);
		var importPath = path.join(context.projectPath, importString);
		var scope = readAndParseFile(importPath, context);
		if (!scope) {
			process.exit();
		}
		if (importSpecifier.find == "all") {
			var mysymb = declareSymbol(yy, null, importSpecifier.add, importSpecifier.add);
			for (const key in scope) {
				var symb = scope[key];
				declareMember(yy, mysymb, symb, meta);
			}
		} else {
			importSpecifier.find.forEach((find) => {
				var symb = scope[find];
				if (!symb) {
					throw new Error ("الئسم " + find + " غير معروف في الوحدة '" + importString + "'")
				}
				declareSymbol(yy, null, symb.name, symb.type, symb.members, symb.isClass);
			});	
		}
	}

    // Function to read and parse imported file
    function readAndParseFile(filePath, context) {
		filePath = path.resolve(filePath);
		let fileContent;
		try {
			fileContent = fs.readFileSync(filePath, 'utf8');
		} catch (e) {
			let projectBasePath = path.dirname(context.projectPath);
			throw new Error("تعدر ئيراد الوحدة: " + filePath);
		}
		fileContent = fileContent; // + globalImport(filePath);
		try {
			const createParser = require('./jparser');
			_parser = createParser();
			const symTable = _parser.parse(fileContent, {
				filePath: filePath,
				projectPath: path.resolve(context.projectPath),
				outPath: context.outPath
			});
			return symTable;
			//console.log(symTable);
			//symbolTable = { ...symbolTable, ...symTable }
			//await fs.promises.writeFile(outFilePath, result, { flag: 'w+' });
		} catch (e) {
			let projectBasePath = path.dirname(context.projectPath);
			console.error("ملف: " + filePath.replace(projectBasePath, ''));
			console.error(e);
			return null;
		}
    }
	
	function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const createParser = require('./jparser');
		_parser = createParser(yy);
		const result = _parser.parse(s, {
			inlineParse: true,
			projectPath: path.resolve(context.projectPath),
			outPath: context.outPath
		});
		return result;
	}
	
	function isUrlImport(s) {
		//return s.startsWith('//');
		return s.startsWith('"') || s.startsWith("'");
	}
	
	function isRelativeImport(s) {
		return s.startsWith('.');
	}
	
	function isAbsoluteImport(s) {
		return !s.startsWith('/') && !s.startsWith('//') && !s.startsWith('.')
	}
	
	function globalImport(filePath) {
		let filname = path.basename(filePath, '.جني');
		if (!mustImp.includes(filname) && filname != 'بدائي') {
			return "ئورد " + mustImp.join('، ') + " من ئساسية.بدائي؛";
		} else {
			return "";
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	function processJNX(src, context, yy) {
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = processJNXControl(src, context, yy);
		src = src.replaceAll('{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		while (s != (
			s = s.replace(rgCond, "` + ($2 '') + `").
				replace(rgWhen, function ($0, $1, $2, $3, $4) {
					var result = inlineParse($2.replace('<x-', '<'), context, yy) + " ? `" + $4 + "` :";
					return result;
				}).replace(rgElse, "`$2` +")
		)) {}
		return '`' + s + '`';
	}

	// Utils
	function startup() {
		return "globalThis.العام=globalThis;";
		//return "Object.defineProperty(globalThis)"
	}
	
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }


module.exports = createParser;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	var line_number = 1; // Track line numbers

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2: line_number++; return 'NEWLINE' 
break;
case 3:return 113
break;
case 4:return 66
break;
case 5:return 68
break;
case 6:return 46
break;
case 7:return 110
break;
case 8:return 111
break;
case 9:return 112
break;
case 10:return 53
break;
case 11:return 40
break;
case 12:return 79
break;
case 13:return 80
break;
case 14:return 82
break;
case 15:return 84
break;
case 16:return 81
break;
case 17:return 83
break;
case 18:return 86
break;
case 19:return 87
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 76
break;
case 23:return 77
break;
case 24:return '%'
break;
case 25:return 41
break;
case 26:return 43
break;
case 27:return 95
break;
case 28:return 96
break;
case 29:return 98
break;
case 30:return 100
break;
case 31:return 45
break;
case 32:return 20
break;
case 33:return 29
break;
case 34:return 105
break;
case 35:return 30
break;
case 36:return 54
break;
case 37:return 56
break;
case 38:return 94
break;
case 39:return 47
break;
case 40:return 49
break;
case 41:return 51
break;
case 42:return 60
break;
case 43:return 61
break;
case 44:return 58
break;
case 45:return 55
break;
case 46:return 21
break;
case 47:return 27
break;
case 48:return 93
break;
case 49:return 23
break;
case 50:return 28
break;
case 51:return 91
break;
case 52:return 107
break;
case 53:return 31 // Double quoted string
break;
case 54:return 31 // Single quoted string
break;
case 55:return 109  // Eastern Arabic numerals
break;
case 56:return 26
break;
case 57:return 109 // Western Arabic numerals
break;
case 58:return 5
break;
case 59:return 'UNKNOWN'
break;
}
},
rules: [/^(?:\s+)/,/^(?:#[^\n]*)/,/^(?:\n)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا)/,/^(?:وئلا)/,/^(?:تم)/,/^(?:صحيح)/,/^(?:خطئ)/,/^(?:عدم)/,/^(?:دع)/,/^(?:ئعلن)/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو )/,/^(?:ئو )/,/^(?:\+)/,/^(?:-)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:ئرجع )/,/^(?:هدا)/,/^(?:يمدد )/,/^(?:يختصر )/,/^(?:يملك )/,/^(?:لكل )/,/^(?:في )/,/^(?:طالما )/,/^(?:قل )/,/^(?:ئورد )/,/^(?:ك )/,/^(?:ئنشئ )/,/^(?:من )/,/^(?:الكل )/,/^(?:ريتما )/,/^(?:ليس )/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}