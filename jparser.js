/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,29],$V2=[1,34],$V3=[1,13],$V4=[1,27],$V5=[1,24],$V6=[1,40],$V7=[1,39],$V8=[1,35],$V9=[1,41],$Va=[1,42],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,36],$Vg=[5,26,31,36,37,59,78,81,124,125,131,133,137,138,139,140,141],$Vh=[1,46],$Vi=[1,62],$Vj=[1,61],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,49],$Vv=[1,50],$Vw=[1,68],$Vx=[2,52],$Vy=[25,34,43,61,79,82,92,97,99,104,105,106,107,109,110,111,112,113,114,116,117],$Vz=[1,75],$VA=[2,176],$VB=[1,78],$VC=[1,77],$VD=[1,79],$VE=[2,178],$VF=[1,82],$VG=[1,81],$VH=[34,79],$VI=[2,188],$VJ=[1,88],$VK=[1,87],$VL=[1,89],$VM=[1,94],$VN=[1,100],$VO=[1,101],$VP=[2,5,26,31,36,37,45,59,70,72,73,78,81,83,84,87,89,91,97,99,124,125,131,133,137,138,139,140,141],$VQ=[25,28,34],$VR=[1,123],$VS=[1,126],$VT=[34,61],$VU=[2,134],$VV=[1,138],$VW=[1,140],$VX=[32,43],$VY=[1,158],$VZ=[1,160],$V_=[1,159],$V$=[1,156],$V01=[25,34,43,61,79,82,92,99,104,105,106,107,109,110,111,112,113,114,116,117],$V11=[34,82],$V21=[25,34,43,61,79,82,99,104,105,106,107,109,110,111,112,113,114,116,117],$V31=[25,34,43,61,79,82,99,104,105],$V41=[25,34,43,61,79,82,99,104,105,106,107],$V51=[25,34,43,61,79,82,99,104,105,106,107,109,110,111,112,113,114],$V61=[1,186],$V71=[1,191],$V81=[1,187],$V91=[1,188],$Va1=[1,189],$Vb1=[1,190],$Vc1=[1,192],$Vd1=[1,193],$Ve1=[1,199],$Vf1=[1,200],$Vg1=[1,201],$Vh1=[25,34,39,43,61,79,82,92,97,99,104,105,106,107,109,110,111,112,113,114,116,117],$Vi1=[2,74],$Vj1=[25,32,34,35,39,43,59,61,78,79,82,92,97,99,104,105,106,107,109,110,111,112,113,114,116,117],$Vk1=[1,210],$Vl1=[25,34,39,45,61,72,82],$Vm1=[2,63],$Vn1=[1,230],$Vo1=[25,35],$Vp1=[2,31,36,45,59,70,72,73,78,81,83,84,87,89,91,97,99,124,125,131,133,137,138,139,140,141],$Vq1=[25,92,97,104,105,106,107,109,110,111,112,113,114,116,117],$Vr1=[1,260],$Vs1=[25,34,45,82],$Vt1=[25,32,34,35,43,61,79,82,92,97,99,104,105,106,107,109,110,111,112,113,114,116,117],$Vu1=[25,32,34,35,39,43,59,61,79,82,92,97,99,104,105,106,107,109,110,111,112,113,114,116,117],$Vv1=[1,295],$Vw1=[45,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declstatement_list":4,"EOF":5,"declstatement":6,"import_statement":7,"semic_or_nl":8,"function_def":9,"var_def":10,"struct_def":11,"expression":12,"statement_list":13,"statement":14,"super_call":15,"shortcuts_call":16,"has_statement":17,"var_declaration":18,"say_statement":19,"return_statement":20,"while_statement":21,"for_in_statement":22,"if_statement":23,"assignment":24,"؛":25,"IMPORT":26,"import_specifier":27,"FROM":28,"import_path":29,"import_list":30,"IDENTIFIER":31,"AS":32,"ALL":33,"،":34,".":35,"STRING":36,"DECL":37,"type_decl":38,"=":39,"struct_decl":40,"struct_body":41,"STRUCT":42,":":43,"has_list":44,"END":45,"enum_def":46,"enum_decl":47,"enum_body":48,"ENUM":49,"enum_list":50,"enum_elem":51,"function_decl":52,"function_ret":53,"body_block":54,"subfunc_decl":55,"PROMISE":56,"function_decl_name":57,"function_decl_params":58,"(":59,"param_list":60,")":61,"subfunc_decl_name":62,"param":63,"param_def":64,"DALA":65,"is_param_opt":66,"dala_params":67,"؟":68,"dala_param_types":69,"SUPER":70,"arg_list":71,"SHORTCUTS":72,"HAS":73,"has_list_elements":74,"has_list_element":75,"param_decl":76,"param_init":77,"[":78,"]":79,"identifier_list":80,"{":81,"}":82,"DEF":83,"SAY":84,"wtype_expr":85,"WTYPE":86,"RETURN":87,"while_head":88,"WHILE":89,"for_in_head":90,"FOR":91,"IN":92,"if_head":93,"noend_block":94,"elif_clauses":95,"else_clause":96,"IF":97,"elif_head":98,"ELSE":99,"else_head":100,"member_access":101,"array_access":102,"arithmetic":103,"+":104,"-":105,"×":106,"÷":107,"comparison":108,"EQ":109,"NEQ":110,"LT":111,"LTE":112,"GT":113,"GTE":114,"logical":115,"AND":116,"OR":117,"ternary":118,"function_call":119,"func_arg":120,"lambda_expr":121,"declare_dala":122,"await_expr":123,"AWAIT":124,"SELF":125,"object_literal":126,"property_list":127,"property":128,"array_elements":129,"spread_operator":130,"SPREAD":131,"logical_negation":132,"NOT":133,"in_expression":134,"type_casting":135,"parenthesis_expr":136,"NUMBER":137,"TRUE":138,"FALSE":139,"NULL":140,"JNX":141,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"؛",26:"IMPORT",28:"FROM",31:"IDENTIFIER",32:"AS",33:"ALL",34:"،",35:".",36:"STRING",37:"DECL",39:"=",42:"STRUCT",43:":",45:"END",49:"ENUM",56:"PROMISE",59:"(",61:")",65:"DALA",68:"؟",70:"SUPER",72:"SHORTCUTS",73:"HAS",78:"[",79:"]",81:"{",82:"}",83:"DEF",84:"SAY",86:"WTYPE",87:"RETURN",89:"WHILE",91:"FOR",92:"IN",97:"IF",99:"ELSE",104:"+",105:"-",106:"×",107:"÷",109:"EQ",110:"NEQ",111:"LT",112:"LTE",113:"GT",114:"GTE",116:"AND",117:"OR",124:"AWAIT",125:"SELF",131:"SPREAD",133:"NOT",137:"NUMBER",138:"TRUE",139:"FALSE",140:"NULL",141:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,1],[6,2],[6,1],[6,2],[13,1],[13,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[8,1],[7,4],[7,2],[27,1],[27,3],[27,3],[30,1],[30,3],[29,1],[29,3],[29,1],[10,6],[10,6],[10,8],[11,3],[40,2],[41,3],[46,3],[47,2],[48,3],[50,1],[50,3],[51,1],[51,3],[9,3],[9,3],[53,2],[53,3],[53,0],[52,2],[57,2],[58,3],[55,2],[62,4],[60,0],[60,1],[60,3],[63,1],[63,6],[66,0],[66,1],[67,3],[69,0],[69,1],[69,3],[54,3],[54,2],[15,5],[16,2],[17,2],[44,0],[44,1],[74,1],[74,3],[75,1],[75,3],[64,1],[64,2],[76,2],[76,3],[76,5],[76,6],[76,6],[77,2],[80,1],[80,3],[18,2],[18,4],[18,2],[18,4],[18,4],[18,6],[19,2],[85,2],[20,2],[20,1],[21,2],[88,2],[22,2],[90,4],[23,5],[23,4],[23,4],[23,3],[93,2],[95,2],[95,3],[98,3],[94,2],[96,2],[100,1],[24,3],[24,3],[24,3],[103,3],[103,3],[103,3],[103,3],[108,3],[108,3],[108,3],[108,3],[108,3],[108,3],[115,3],[115,3],[118,5],[119,4],[119,4],[119,4],[71,0],[71,1],[71,3],[120,1],[120,1],[120,3],[120,3],[121,4],[122,1],[123,2],[101,3],[101,3],[101,3],[101,3],[101,3],[101,5],[102,4],[102,4],[102,4],[126,3],[126,2],[127,1],[127,3],[128,3],[128,3],[129,0],[129,1],[129,3],[38,1],[38,3],[130,2],[132,2],[134,3],[135,2],[136,3],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,1],[12,1],[12,2],[12,1],[12,2],[12,1],[12,1],[12,3],[12,4],[12,1],[12,1],[12,4],[12,1],[12,1],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var result = $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		let fileName = context.filePath.replace(context.projectPath, '.').replace('.جني', '.mjs');
		fileName = fileName.replace(__dirname, '.');
		fileName = fileName.replaceAll('/', '.').replace('..', '/');
		
		// make sure not to repeat last two names: ئساسية.ئساسية.جني becomes ئساسية.جني
		var nameArr = fileName.split('.');
		var lastName = nameArr[nameArr.length - 2];
		var lastLastName = nameArr[nameArr.length - 3];
		if (lastLastName) {
			if (lastName == lastLastName.replace('/', '')) {
				fileName = fileName.replace(lastName + '.', '');
			}
		}
		
		let outFilePath = path.join(context.outPath, fileName);
		
		fs.writeFile(outFilePath, result, { flag: 'w+' }, (err) => {
			if (err) {
				throw new Error('فشل حفض الملف: ' + outFilePath);
			}
		});	
		// get global scope
		var glob = yy.symbolScopes.exit();
		return glob; // return global scope
    
break;
case 3: case 10:
 this.$ = [$$[$0]]; 
break;
case 4: case 11:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 7: case 12: case 14: case 15: case 16: case 17:
 this.$ = $$[$0-1]; 
break;
case 6: case 8: case 18: case 19: case 20: case 30: case 32: case 34:
 this.$ = $$[$0]; 
break;
case 9: case 21: case 22:
 this.$ = $$[$0-1].value; 
break;
case 13: case 23: case 58:
 this.$ = ''; 
break;
case 25:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ImportManager.setContext(context);
		
		var importSpecifier = $$[$0-2];
		var scope;
		
		// if there is only one find, we pass it to the importmanager
		// so we can treat cases like these:
		// import جيزن from ئساسية
		// it will look for جيزن in path ئساسية/جيزن.جني
		// since it will not find neither ئساسية.جني nor ئساسية/ئساسية.جني
		if (importSpecifier.find.length == 1) {
			scope = ImportManager.addImport($$[$0], context.filePath, importSpecifier.find);
		} else {
			scope = ImportManager.addImport($$[$0], context.filePath);
		}
		
		if (importSpecifier.find == 'all') {
			var mySymb;
			if (!scope) { // string import
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add, 'مجهول');
			} else {
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add);
				scope.copyToSymbol(mySymb);
			}
		} else {
			if (!scope) { // string import
				importSpecifier.add.forEach((add) => {
					yy.symbolScopes.declareSymbol(add, 'مجهول');
				});
			} else {
				importSpecifier.find.forEach((find) => {
					var symb = scope.getSymbolByName(find);
					if (!symb) {
						ErrorManager.error("الئسم " + find + " غير معروف في الوحدة '" + $$[$0] + "'");
					}
					// TODO REVIEW symb.name = sym.add
					yy.symbolScopes.addSymbol(symb);
				});
			}
		}
		
		var exp = $$[$0-2].value;
		if (exp.includes('* as ')) {
			exp = '{' + exp.replace('* as ', '') + '}';
		} else if (exp.includes(' as ')) {
			var tmp = exp.split (' as ');
			exp = '{' + tmp[1];
		}
		if (!scope) { // this is a string import
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";export ' + exp; 
			}
		} else {
			var imp = './' + $$[$0] + '.mjs';
			if (scope.getSourceFile() && (!$$[$0].endsWith(scope.getSourceFile()))) {
				imp = './' + $$[$0] + '.' + scope.getSourceFile() + '.mjs';
			}
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";export ' + exp;
		}
	
break;
case 26:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		var importNames = $$[$0].split(', ');
		var result = '';
		importNames.forEach (impName => {
			var scope = ImportManager.addImport(impName, context.filePath);
			var symb = scope.getSymbolByName(impName);
			if (!symb) {
				ErrorManager.error("الئسم " + impName + " غير معروف في الوحدة '" + impName + "'");
			}
			// TODO REVIEW symb.name = sym.add
			yy.symbolScopes.addSymbol(symb);
			var imp = './' + impName + '.mjs';
			var exp = impName;
			var sep = result == '' ? '' : ';';
			result += sep + 'import {' + impName + '} from "' + imp + '";export {' + exp + '}';
		});
		this.$ = result;
	
break;
case 27:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 28:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 29:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 31:

		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 33:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 35:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-4]);
		//var mySymb2 = yy.symbolScopes.createSymbol($$[$0-2], $$[$0].type, $$[$0].isArray);
		var mySymb2 = yy.symbolScope.createSymbolS($$[$0-2], $$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.addMember(mySymb2);
		this.$ = $$[$0-4] + '.' + $$[$0-2] + ' = null';
	
break;
case 36:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-4]);
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0-2], 'منوع', $$[$0].symb.isArray);
		mySymb.addMember(mySymb2);
		this.$ = $$[$0-4] + '.' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 37:

		ErrorManager.setContext(_$[$0-7], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-6]);
		//var mySymb2 = yy.symbolScopes.createSymbol($$[$0-4], $$[$0-2].type, $$[$0-2].isArray);
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0-4], $$[$0-2].symb, $$[$0-2].isArray, $$[$0-2].subTypeSymbol);
		if (! $$[$0].symb.canBeAssignedTo(mySymb2) ) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb2.toTypeString());
		}
		mySymb.addMember(mySymb2);
		this.$ = $$[$0-6] + '.' + $$[$0-4] + ' = ' + $$[$0].value;
	
break;
case 38:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		this.$ = 'export const ' + $$[$0-1] + ' = {}'; // no output
	
break;
case 39:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isStruct = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
		this.$ = $$[$0];
	
break;
case 40:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current struct symbol
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of symbols
		symbols.forEach((symb) => {
			funcSymb.addMember(symb);
		});
	
break;
case 41:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		this.$ = ''; // no output
	
break;
case 42:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isEnum = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
	
break;
case 43:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current enum symbol
		var enums = $$[$0-1]; // $$[$0-1] enum_list is an array of {symb, value}
		enums.forEach((enu) => {
			funcSymb.addMember(enu.symb);
		});
	
break;
case 44: case 88:

		this.$ = [$$[$0]]
	
break;
case 45:

		$$[$0-2].push($$[$0]);
		if ($$[$0].value == null) {
			$$[$0].value = $$[$0-2].length
		}
		this.$ = $$[$0-2];
	
break;
case 46:

		this.$ = {
			symb: yy.symbolScopes.createSymbol($$[$0], 'عدد'),
			value: null
		}
	
break;
case 47:

		this.$ = {
			symb: yy.symbolScopes.createSymbol($$[$0-2], $$[$0].symb.getTypeName()),
			value: $$[$0].value
		}
	
break;
case 48:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		if (body_block.includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb;
		}
		
		var extendStr = '';
		if (funcSymb.hasParent()) {
			extendStr = ' extends ' + funcSymb.mySuper;
		}
		
		if (!selfSymb.isClass && !function_ret.symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة '" + funcSymb.toString() + "'");
		}
		
		if (function_decl.funcname == 'مدخل') { // self exec main function
			this.$ = '(async function ' + function_decl.funcname + function_decl.params + body_block + ')()'; 
		} else if (funcSymb.isShortcut()) { // this is a shortcut
			this.$ = function_decl.exportStr + 'const ' + function_decl.funcname + '=' + funcSymb.myShortcut + ';'
				/* + function_decl.funcname + '.prototype || (' + function_decl.funcname + '.prototype = {});' */
				+ body_block.slice(1,-1); // remove first and last { }
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if (funcSymb.typeIsNot(funcSymb.name)) {
				ErrorManager.error("لا يجب تحديد نوع ئرجاع لصنف <" + funcSymb.getTypeName() + ">");
			}
			this.$ = function_decl.exportStr + 'class ' + function_decl.funcname + extendStr + '{constructor' + function_decl.params + body_block + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.exportStr + asyncStr + 'function ' + function_decl.funcname + function_decl.params + body_block;
		}
	
break;
case 49:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var funcSymb = yy.funcStack.pop();
		
		// dealing with setters and getters (DISABLED FOR NOW)
		/*
		var setterCode = '';
		var getterCode = '';
		if (function_decl.funcname.startsWith('رد')) {
			// getter function
			getterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{get: function() {return this.${function_decl.funcname}();},configurable:true});`;
		}
		if (function_decl.funcname.startsWith('خد')) {
			// setter function
			setterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{set: function (value) {this.${function_decl.funcname}(value);},configurable:true});`;
		}
		*/
		
		if (funcSymb.isShortcut()) {
			var result = function_decl.objname + '.prototype != null && (' + function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.prototype.' + funcSymb.myShortcut + ');';
			result += function_decl.objname + '.' + function_decl.funcname + '=' + function_decl.objname + '.' + funcSymb.myShortcut + ';';
			this.$ = result;
		} else {
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.' + function_decl.funcname + '=' + asyncStr + 'function' + function_decl.value + body_block;
		}
	
break;
case 50:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// $$[$0] = { type, subtype }
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		//funcSymb.typeSymbol = yy.symbolScopes.getSymbByName($$[$0].type);
		funcSymb.typeSymbol = $$[$0].symb;
		funcSymb.isArray = $$[$0].isArray;
		if ($$[$0].isArray && !$$[$0].subTypeSymbol) {	
			console.error($$[$0]);
			throw new Error ('مصفوفة دون نوع فرعي');
		}
		funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 51:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		//funcSymb.typeSymbol = yy.symbolScopes.getSymbByName($$[$0].type);
		funcSymb.typeSymbol = $$[$0].symb;
		funcSymb.isArray = $$[$0].isArray;
		funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		funcSymb.isAwait = true;
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 52:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 53:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0]
		}
	
break;
case 54:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ErrorManager.setFunc($$[$0]);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], 'فارغ');
		
		yy.selfStack.push(mySymb);
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();	
		
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 55:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 56:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 57:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.setFunc($$[$0-2] + '.' + $$[$0]);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		yy.selfStack.push(mySymb);
		yy.symbolScopes.enter();
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0], 'فارغ');
		mySymb.addMember(mySymb2);
		yy.funcStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 59:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = $$[$0];
	
break;
case 60:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = $$[$0-2] + ',' + $$[$0];
	
break;
case 61:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.args.push({
			symb: $$[$0].symb,
			init: $$[$0].init
		});
		this.$ = $$[$0].value;
	
break;
case 62:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'دالة', false, $$[$0].symb.name);
		funcSymb.args.push({
			symb: symb,
			init: $$[$0-3]
		});
		this.$ = $$[$0-4];
	
break;
case 63:

		/* empty */
		this.$ = false;
	
break;
case 64:

		this.$ = true;
	
break;
case 65: case 66:

		this.$ = "";
	
break;
case 67: case 68:

		//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = "";
	
break;
case 69:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0-1].filter(Boolean).join(';') + '}';
	
break;
case 70:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{}';
	
break;
case 71:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var superSymb = yy.symbolScopes.getSymbByName($$[$0-3]);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.mySuper = $$[$0-3];
		
		// check args
		var paramValues = superSymb.checkArgs($$[$0-1]);

		// copy super members to self members
		// superSymb.copyMembersTo(selfSymb);
		selfSymb.superSymbol = superSymb;
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb; // change type to itself

		// if this class already shortcuts, then don't call super()
		if (selfSymb.isShortcut()) {
			this.$ = '';
		} else {
			this.$ = 'super(' + $$[$0-1] + ')';
		}
    
break;
case 72:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.myShortcut = $$[$0];
		if (selfSymb.name == funcSymb.name) { // we are in a class
			selfSymb.myShortcut = $$[$0];
			var superSymb = yy.symbolScopes.getSymbByName($$[$0]);
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb; // change type to itself
			// if already have members, this means we used a has or extends before shortcuts > error
			if (selfSymb.members.length) {
				ErrorManager.error('يجب ئن تكون صيغة يختصر كئول سطر في المجموعة');
			}
			// copy origi members to self members if we are in a class
			superSymb.copyMembersTo(selfSymb);
		} else { // we are in a subfunction
			if (!selfSymb.isShortcut()) {
				// parent not shortcuting
				selfSymb.checkMember($$[$0]);
			} else {
				// parent have a shortcut
				var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
				superSymb.checkMember($$[$0]);
			}
		}
	
break;
case 73:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true; // has keyword makes this a class
		selfSymb.typeSymbol = selfSymb; // change type to itself
		
		var thisStr = 'this';
		if (selfSymb.isShortcut()) {
			thisStr = selfSymb.name + '.prototype';
		}
		var result = ''; // will contain setter, getter output for the property
		
		// $$[$0] has_list is an array of symbols
		var symbols = $$[$0];
		symbols.forEach((symb) => {
			selfSymb.addMember(symb);
			if (symb.isShortcut()) {
				// declare setters & getters
				var name = symb.myShortcut;
				var getterCode = `return this.${name}`;
				var setterCode = `this.${name} = value;`;
				result += `Object.defineProperty(${selfSymb.name}.prototype, '${symb.name}', {get: function() {${getterCode}}, set: function(value) {${setterCode}} });`;
			}
		});
		this.$ = result;
	
break;
case 74:
 
		this.$ = []; 
	
break;
case 75: case 87:

		this.$ = $$[$0];
	
break;
case 76:

		this.$ = [$$[$0]];
	
break;
case 77:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 78:

		this.$ = $$[$0].symb
	
break;
case 79:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		if (!selfSymb.isShortcut()) {
			// parent not shortcuting
			selfSymb.checkMember($$[$0]);
		} else {
			// parent have a shortcut
			var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
			superSymb.checkMember($$[$0]);
		}
		$$[$0-2].symb.myShortcut = $$[$0];
		this.$ = $$[$0-2].symb;
	
break;
case 80:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			init: $$[$0].init
		}
	
break;
case 81:

		var paramSymb = $$[$0-1].symb;
		var initSymb = $$[$0].symb;
		if (!initSymb.canBeAssignedTo(paramSymb)) {
			ErrorManager.error("محاولة ئسناد " + initSymb.toString() + " ئلا " + paramSymb.toTypeString());
		}
		this.$ = {
			symb: paramSymb,
			value: $$[$0-1].value + '=' + $$[$0].value,
			init: true
		}
	
break;
case 82:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'منوع'),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 83:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], $$[$0-2]),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 84:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'مصفوفة', true /*isArray*/, $$[$0-4]/*subtype*/),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 85:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-1];
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 86:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], null, false, false);
		symb.isStruct = true; // bad but legacy
		// $$[$0-1] has_list is an array of symbols
		var symbols = $$[$0-1];
		symbols.forEach((s) => {
			symb.addMember(s);
		});
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 89:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2]
	
break;
case 90:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// دع ب
		yy.symbolScopes.declareSymbol($$[$0], 'منوع');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 91:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// دع ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], 'منوع', $$[$0].symb.isArray);
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// mySymb is generic add struct memebers to it
			mySymb.members = $$[$0].symb.members;
		}
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 92:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// عدد ب
		yy.symbolScopes.declareSymbol($$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 93:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد[] ب
		symb: yy.symbolScopes.declareSymbol($$[$0], 'مصفوفة', true /*isArray*/, $$[$0-3]/*subtype*/);
		//yy.symbolScopes.declareSymbol($$[$0], $$[$0-3], true);
		this.$ = 'let ' + $$[$0];
	
break;
case 94:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-3]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد '" + $$[$0].symb.toString() + "' ئلا '" + $$[$0-3] + "'");
		}
		
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 95:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		// عدد ب = 4
		var symb = yy.symbolScopes.declareSymbol($$[$0-2], 'مصفوفة', true /*isArray*/, $$[$0-5]/*subtype*/);
		
		if (!$$[$0].symb.canBeAssignedTo(symb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + symb.toString());
		}
		//yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-5], true);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 96:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 97:

		this.$ = {
			symb: yy.symbolScopes.createSymbol('', 'نصية'),
			value: $$[$0].getTypeName()
		}
	
break;
case 98:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIs('فارغ')) {
			ErrorManager.warning("ئستخدام ئرجاع في وضيفة فارغة، سيتم التحويل ئلا منوع");
			// convert function return type to منوع
			funcSymb.typeSymbol = Symbol.SYSTEMTYPES['منوع'];
		}
		
		if (!$$[$0].symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع " + $$[$0].symb.toString() + " غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!funcSymb.typeSymbol.isStruct) {
				// funcSymb is generic add struct memebers to it
				funcSymb.members = $$[$0].symb.members;
			}
		}
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 99:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIsNot('فارغ')) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		this.$ = 'return'; 
	
break;
case 100: case 102:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 101:
 
		yy.symbolScopes.enter();
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 103:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		yy.symbolScopes.declareSymbol($$[$0-2], $$[$0].symb.subTypeSymbol ? $$[$0].symb.subTypeSymbol.name : $$[$0].symb.typeSymbol.name);
		// TOREVIEW
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 104:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 105: case 106:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 107:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 108:

		yy.symbolScopes.enter();
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 109: case 110: case 113:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 111:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 112:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 114:

		yy.symbolScopes.enter();
		this.$ = 'else';
	
break;
case 115:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		this.$ = {
			symb: mySymb,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 116:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		if ($$[$0-2].symb) {
			var mySymb = $$[$0-2].symb;
			if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
				ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + $$[$0-2].symb.toString());
			}
			if ($$[$0].symb.typeIs('نوعبنية')) {
				// expression is an object literal
				if (!mySymb.typeSymbol.isStruct) {
					// mySymb is generic add struct memebers to it
					mySymb.members = $$[$0].symb.members;
				}
			}
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 117:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 118:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 119:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 120:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 121:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 122:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 123:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 124:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 125:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 126:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 127:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 128:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية وو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 129:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية ئو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 130:

		var bool1 = $$[$0-4].symb.canBeAssignedTo($$[$0].symb);
		var bool2 = $$[$0].symb.canBeAssignedTo($$[$0-4].symb);
		if (!bool1 && !bool2) {
			ErrorManager.error("ئستخدام نوعين غير متوافقين في عبارة تلاتية " + $$[$0-4].symb.toString() + " و " + $$[$0].symb.toString());
		}
		var symb;
		if (bool1) symb = $$[$0-4].symb;
		if (bool2) symb = $$[$0].symb;
		// for now type checking will be ignored for ternary
        this.$ = {
			symb: symb, //Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 131:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			value: newStr + $$[$0-3] + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 132:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-3].value + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 133:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.warning("تجاهل فحص المعطيين لئستدعائ وضيفة من مصفوفة");
		this.$ = {
			symb: $$[$0-3].symb,
			value: $$[$0-3].value + '(' + $$[$0-1].map(item => item.value).join(', ') + ')'
		}
	
break;
case 134:
 this.$ = []; 
break;
case 135:

		this.$ = [{
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		}]
	
break;
case 136:

		$$[$0-2].push({
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		})
		this.$ = $$[$0-2];
	
break;
case 137:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null,
		}
	
break;
case 138:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null
		}
	
break;
case 139: case 140:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0-2]
		}
	
break;
case 141:

		yy.symbolScopes.exit();
		var symb = yy.symbolScopes.createSymbol('', 'دالة', false, $$[$0].symb.typeSymbol.name);
		this.$ = {
			symb: symb,
			value: $$[$0-2] + "=>" + $$[$0].value
		}
	
break;
case 142:

		yy.symbolScopes.enter();
	
break;
case 143:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (!funcSymb.isAwait) {
			ErrorManager.error("ئستخدام ريتما في وضيفة متزامنة " + funcSymb.toString());
		}
		//funcSymb.isAwait = true;
        this.$ = {
			symb: $$[$0].symb,
			value: 'await ' + $$[$0].value
		}
    
break;
case 144:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-2]);
		var memberSymb = symb.checkMember($$[$0]);	
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2] + '.' + $$[$0] 
		}
	
break;
case 145:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = $$[$0-2].symb.typeSymbol;
		var memberSymb = symb.checkMember($$[$0]);
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0] 
		}; 
	
break;
case 146:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var memberSymb;
		if (symb.typeIs('نوعبنية')) {
			// for object literals, we take symb name as member base
			memberSymb = symb.checkMember($$[$0]);
		} else {
			// for other variables, we take their symb type as member base
			//var typeSymb = yy.symbolScopes.getSymbByName(symb.type);
			var typeSymb = symb.typeSymbol;
			memberSymb = typeSymb.checkMember($$[$0]);
		}
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0] 
		};
	
break;
case 147:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + '.' + $$[$0]
		};
	
break;
case 148:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = selfSymb.checkMember($$[$0]);
		this.$ = {
			symb,
			value: 'this.' + $$[$0]
		}
	
break;
case 149:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var symb = $$[$0-3].symb.typeSymbol.checkMember($$[$0]);
		this.$ = {
			symb,
			value: '(' + $$[$0-3].value + ').' + $$[$0]
		}
	
break;
case 150:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			symb: symb.isArray ? symb.subTypeSymbol : unknownType,
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 151:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 152:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			// type: symb.subtype, // || 'مجهول'
			//yy.symbolScopes.getSymbByName(symb.subType),
			symb: symb.isArray ? symb.subTypeSymbol : unknownType, 
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 153:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعبنية'));

		symbs.forEach((sy) => {
			symb.addMember(sy);
		});
		
		this.$ = {
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 154:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = new Symbol('');
		symb.typeSymbol = new Symbol('', yy.symbolScopes.getSymbByName('نوعبنية'));
		this.$ = {
			symb: symb,
			value: '{}'
		}
	
break;
case 155:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 156:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 157: case 158:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.createSymbol($$[$0-2]);
		symb.typeSymbol = $$[$0].symb.typeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 159:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منوع'),
			value: []
		}
		//ErrorManager.error("حدد نوع المصفوفة");
		//this.$ = "";
	
break;
case 160:

        this.$ = {
			symb: $$[$0].symb,
			value: [ $$[$0].value ]
		}
    
break;
case 161:

		ErrorManager.setContext(_$[$0-2], context.filePath);
        $$[$0-2].value.push($$[$0].value);
		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("نوعين غير متجانسين في المصفوفة");
		}
        this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value
		}
    
break;
case 162:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			subTypeSymbol: null,
			isArray: false
		}
	
break;
case 163:

		var symb = yy.symbolScopes.getSymbByName('مصفوفة');
		var subTypeSymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		this.$ = {
			symb: symb,
			subTypeSymbol: subTypeSymb,
			isArray: true,
		}
	
break;
case 164:

		this.$ = '...' + $$[$0].value;
	
break;
case 165:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: '!' + $$[$0].value
		}
	
break;
case 166:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 167:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = $$[$0].symb;	//yy.symbolScopes.getSymbByName($$[$0].type);
		// $$[$0].isArray
		this.$ = {
			symb: symb,
			isArray: $$[$0].isArray,
			subTypeSymbol: $$[$0].subTypeSymb
		}
	
break;
case 168:

		this.$ = {
			symb: $$[$0-1].symb,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 169: case 170: case 176:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 171:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 172:
 
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 173:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value 
		}; 
	
break;
case 174:

		// function_call
		var symb = $$[$0-1].symb.duplicate($$[$0].symb);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		};
	
break;
case 175:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 177:

		// member_access
		var symb = $$[$0-1].symb.duplicate($$[$0].symb);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 178:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value
		} 
	
break;
case 179:

		var symb = $$[$0-1].symb.duplicate($$[$0].symb);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 180:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}; 
	
break;
case 181:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0]
		}
	
break;
case 182:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var elemTypeSymb = $$[$0-1].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, elemTypeSymb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 183:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var elemTypeSymb = $$[$0-2].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, $$[$0].symb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-2].value.join(', ') + ']'
		}
	
break;
case 184:

		this.$ = { 
			symb: $$[$0].symb, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 185:

		this.$ = {
			symb: $$[$0].symb,
			value: '(' + $$[$0].value + ')'
		};
	
break;
case 186:

		var symb = $$[$0-2].symb.duplicate($$[$0].symb);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-2].value + ')'
		}
	
break;
case 187:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0].value
		}
	
break;
case 188:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			value: $$[$0]
		}; 
	
break;
case 189:

		var symb = yy.symbolScopes.getSymbByName($$[$0-1]);
		var mySymb = symb.duplicate($$[$0].symb);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: $$[$0-1]
		}; 
	
break;
case 190:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('عدد'),
			value: toEnDigit($$[$0])
		}
	
break;
case 191:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'), 
			value: 'true'
		}; 
	
break;
case 192:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: 'false'
		}; 
	
break;
case 193:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['عدم'],
			value: 'null'
		}; 
	
break;
case 194:

		ErrorManager.setContext(_$[$0], context.filePath);
		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		const regex = /_{(.*?)}/g;
		var match;
		
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				inlineParse(s, context, yy);
			}
		}
		var val = $$[$0].replaceAll('"', '').replaceAll("'", "");
		var symb = yy.symbolScopes.createSymbol(val, 'نصية');
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: $$[$0].replaceAll('"', '`').replaceAll('_{', '${').replaceAll('هدا.', 'this.')
		}
	
break;
case 195:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.selfStack[yy.selfStack.length-1],
			value: 'this'
		}			
	
break;
case 196:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = yy.selfStack[yy.selfStack.length-1];
		var mySymb = symb.duplicate($$[$0].symb);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: 'this'
		}; 
	
break;
case 197:

		ErrorManager.setContext(_$[$0], context.filePath);
		var result = $$[$0].replace('(', '').replace(')', '') // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
		result = processJNX(result, context, yy);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('نصية'),
			value: result
		}
	
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,26:$V0,31:$V1,36:$V2,37:$V3,52:11,55:12,57:37,59:$V4,62:38,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{1:[3]},{5:[1,43],6:44,7:5,9:6,10:7,11:8,12:9,26:$V0,31:$V1,36:$V2,37:$V3,52:11,55:12,57:37,59:$V4,62:38,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{1:[2,2]},o($Vg,[2,3]),{8:45,25:$Vh},o($Vg,[2,6]),{8:47,25:$Vh},o($Vg,[2,8]),{8:48,25:$Vh,92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{27:63,30:64,31:[1,65],33:[1,66]},{32:$Vw,43:$Vx,53:67},{32:$Vw,43:$Vx,53:69},{31:[1,70],40:71,42:[1,72]},o($Vy,[2,169]),o($Vy,[2,170]),o($Vy,[2,171]),o($Vy,[2,172]),o($Vy,[2,173],{135:73,32:$Vz,35:[1,74]}),o($Vy,[2,175]),o($Vy,$VA,{135:76,32:$Vz,35:$VB,59:$VC,78:$VD}),o($Vy,$VE,{135:80,32:$Vz,35:$VF,59:$VG}),o($Vy,[2,180]),o($Vy,[2,181]),o($VH,[2,159],{115:14,103:15,108:16,118:17,119:18,123:19,101:20,102:21,126:22,130:23,132:25,136:26,134:28,129:83,12:84,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),o($Vy,[2,184]),o($Vy,[2,185]),{12:85,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vy,[2,187]),o($Vy,$VI,{135:86,32:$Vz,35:$VJ,59:$VK,78:$VL}),o($Vy,[2,190]),o($Vy,[2,191]),o($Vy,[2,192]),o($Vy,[2,193]),o($Vy,[2,194]),o($Vy,[2,195],{135:90,32:$Vz,35:[1,91],78:[1,92]}),o($Vy,[2,197]),{58:93,59:$VM},{58:95,59:$VM},{12:96,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{31:$VN,36:$VO,82:[1,98],127:97,128:99},{12:102,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:103,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{1:[2,1]},o($Vg,[2,4]),o($Vg,[2,5]),o($VP,[2,24]),o($Vg,[2,7]),o($Vg,[2,9]),{12:104,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:105,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:106,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:107,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:108,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:109,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:110,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:111,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:112,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:113,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:114,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:115,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:116,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:117,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{28:[1,118]},{25:[2,26],28:[2,27],34:[1,119]},o($VQ,[2,30],{32:[1,120]}),{32:[1,121]},{43:$VR,54:122},{31:$VS,38:124,56:[1,125]},{43:$VR,54:127},{35:[1,128],59:[2,54]},{41:129,43:[1,130]},{31:[1,131]},o($Vy,[2,174]),{31:[1,132]},{31:$VS,38:133},o($Vy,[2,177]),o($VT,$VU,{115:14,103:15,108:16,118:17,119:18,123:19,101:20,102:21,126:22,130:23,132:25,136:26,134:28,71:134,120:135,12:136,121:137,122:139,31:$VV,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),{31:[1,141]},{12:142,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vy,[2,179]),o($VT,$VU,{115:14,103:15,108:16,118:17,119:18,123:19,101:20,102:21,126:22,130:23,132:25,136:26,134:28,120:135,12:136,121:137,122:139,71:143,31:$VV,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),{31:[1,144]},{34:[1,146],79:[1,145]},o($VH,[2,160],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),{61:[1,147],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vy,[2,189]),o($VT,$VU,{115:14,103:15,108:16,118:17,119:18,123:19,101:20,102:21,126:22,130:23,132:25,136:26,134:28,120:135,12:136,121:137,122:139,71:148,31:$VV,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),{31:[1,149]},{12:150,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vy,[2,196]),{31:[1,151]},{12:152,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($VX,[2,53]),o($VT,[2,58],{60:153,63:154,64:155,76:157,31:$VY,42:$VZ,49:$V_,65:$V$}),o($VX,[2,56]),o($V01,[2,143],{97:$Vj}),{34:[1,162],82:[1,161]},o($Vy,[2,154]),o($V11,[2,155]),{43:[1,163]},{43:[1,164]},o([25,34,43,61,79,82,99],[2,164],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V01,[2,165],{97:$Vj}),o([25,34,43,61,79,82,99,104,105,106,107,109,110,111,112,113,114,116],[2,128],{92:$Vi,97:$Vj,117:$Vv}),o($V21,[2,129],{92:$Vi,97:$Vj}),o($V31,[2,118],{92:$Vi,97:$Vj,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V31,[2,119],{92:$Vi,97:$Vj,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V41,[2,120],{92:$Vi,97:$Vj,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V41,[2,121],{92:$Vi,97:$Vj,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V51,[2,122],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),o($V51,[2,123],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),o($V51,[2,124],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),o($V51,[2,125],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),o($V51,[2,126],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),o($V51,[2,127],{92:$Vi,97:$Vj,116:$Vu,117:$Vv}),{92:$Vi,97:$Vj,99:[1,165],104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($V21,[2,166],{92:$Vi,97:$Vj}),{29:166,31:[1,167],36:[1,168]},{31:[1,169]},{31:[1,170]},{31:[1,171]},o($Vg,[2,48]),{2:$V61,12:185,13:172,14:174,15:175,16:176,17:177,18:178,19:179,20:180,21:181,22:182,23:183,24:184,31:$V71,36:$V2,45:[1,173],59:$V4,70:$V81,72:$V91,73:$Va1,78:$V5,81:$V6,83:$Vb1,84:$Vc1,87:$Vd1,88:194,89:$Ve1,90:195,91:$Vf1,93:196,97:$Vg1,101:197,102:198,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:[2,50]},{31:$VS,38:202},o($Vh1,[2,162],{78:[1,203]}),o($Vg,[2,49]),{31:[1,204]},o($Vg,[2,38]),{31:$VY,42:$VZ,44:205,45:$Vi1,49:$V_,74:206,75:207,76:208},{43:[2,39]},o($Vj1,[2,145]),o($Vy,[2,167]),{34:$Vk1,61:[1,209]},o($VT,[2,135]),o($VT,[2,137],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($VT,[2,138]),o([34,61,92,97,104,105,106,107,109,110,111,112,113,114,116,117],$VI,{135:86,32:$Vz,35:$VJ,43:[1,211],59:$VK,78:$VL}),{58:212,59:$VM},{59:[2,142]},o($Vj1,[2,146]),{79:[1,213],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{34:$Vk1,61:[1,214]},o($Vj1,[2,147]),o($Vy,[2,182],{135:215,32:$Vz}),{12:216,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vy,[2,168],{135:217,32:$Vz,35:[1,218]}),{34:$Vk1,61:[1,219]},o($Vj1,[2,144]),{79:[1,220],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vj1,[2,148]),{79:[1,221],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{34:[1,223],61:[1,222]},o($VT,[2,59]),o($VT,[2,61]),{31:[1,224]},o($VT,[2,80],{77:225,39:[1,226]}),o($Vl1,$Vm1,{66:227,31:[1,228],68:$Vn1,78:[1,229]}),{31:[1,231]},{31:[1,232]},o($Vy,[2,153]),{31:$VN,36:$VO,128:233},{12:234,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:235,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:236,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{25:[2,25],35:[1,237]},o($Vo1,[2,32]),o($Vo1,[2,34]),o($VQ,[2,31]),{28:[2,28]},{28:[2,29]},{2:$V61,12:185,14:239,15:175,16:176,17:177,18:178,19:179,20:180,21:181,22:182,23:183,24:184,31:$V71,36:$V2,45:[1,238],59:$V4,70:$V81,72:$V91,73:$Va1,78:$V5,81:$V6,83:$Vb1,84:$Vc1,87:$Vd1,88:194,89:$Ve1,90:195,91:$Vf1,93:196,97:$Vg1,101:197,102:198,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($VP,[2,70]),o($Vp1,[2,10]),{8:240,25:$Vh},{8:241,25:$Vh},{8:242,25:$Vh},{8:243,25:$Vh},{8:244,25:$Vh},{8:245,25:$Vh},o($Vp1,[2,18]),o($Vp1,[2,19]),o($Vp1,[2,20]),{8:246,25:$Vh},{8:247,25:$Vh,92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vp1,[2,23]),{31:[1,248]},{31:[1,249]},{25:$Vi1,31:$VY,42:$VZ,44:250,49:$V_,74:206,75:207,76:208},{31:[1,251]},o($Vq1,$VI,{135:86,31:[1,252],32:$Vz,35:$VJ,39:[1,254],59:$VK,78:[1,253]}),{12:255,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:256,25:[2,99],31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:$VR,54:257},{43:$VR,54:258},{43:$Vr1,94:259},o($Vq1,$VA,{135:76,32:$Vz,35:$VB,39:[1,261],59:$VC,78:$VD}),o($Vq1,$VE,{135:80,32:$Vz,35:$VF,39:[1,262],59:$VG}),{12:263,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{31:[1,264]},{12:265,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:[2,51]},{79:[1,266]},{32:[1,267],39:[1,268],59:[2,57]},{45:[1,269]},o([25,45,82],[2,75],{34:[1,270]}),o($Vs1,[2,76]),o($Vs1,[2,78],{72:[1,271]}),o($Vt1,[2,132]),{12:136,31:$VV,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,120:272,121:137,122:139,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:273,31:$V1,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,121:274,122:139,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:[1,275]},o($Vu1,[2,152]),o($Vt1,[2,133]),o($Vy,[2,183]),o($VH,[2,161],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($Vy,[2,186]),{31:[1,276]},o($Vt1,[2,131]),o($Vu1,[2,150]),o($Vu1,[2,151]),o($VX,[2,55]),{31:$VY,42:$VZ,49:$V_,63:277,64:155,65:$V$,76:157},{59:$Vm1,66:278,68:$Vn1},o($VT,[2,81]),{12:279,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vl1,[2,82]),o($Vl1,$Vm1,{66:280,68:$Vn1}),{79:[1,281]},o([25,34,39,45,59,61,72,78,81,82],[2,64]),{66:282,68:$Vn1,78:$Vm1},{66:283,68:$Vn1,81:$Vm1},o($V11,[2,156]),o($V11,[2,157],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V11,[2,158],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($V01,[2,130],{97:$Vj}),{31:[1,284]},o($VP,[2,69]),o($Vp1,[2,11]),o($Vp1,[2,12]),o($Vp1,[2,13]),o($Vp1,[2,14]),o($Vp1,[2,15]),o($Vp1,[2,16]),o($Vp1,[2,17]),o($Vp1,[2,21]),o($Vp1,[2,22]),{59:[1,285]},{25:[2,72]},{25:[2,73]},{25:[2,90],39:[1,286]},{25:[2,92],39:[1,287]},{12:150,31:$V1,36:$V2,59:$V4,78:$V5,79:[1,288],81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:289,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{25:[2,96],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{25:[2,98],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vp1,[2,100]),o($Vp1,[2,102]),{45:[1,292],95:290,96:291,98:293,99:$Vv1,100:294},{2:$V61,12:185,13:296,14:174,15:175,16:176,17:177,18:178,19:179,20:180,21:181,22:182,23:183,24:184,31:$V71,36:$V2,59:$V4,70:$V81,72:$V91,73:$Va1,78:$V5,81:$V6,83:$Vb1,84:$Vc1,87:$Vd1,88:194,89:$Ve1,90:195,91:$Vf1,93:196,97:$Vg1,101:197,102:198,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:297,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:298,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:[2,101],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{92:[1,299]},{43:[2,108],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vh1,[2,163]),{31:$VS,38:300},{12:301,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vg,[2,40]),{31:$VY,42:$VZ,49:$V_,75:302,76:208},{31:[1,303]},o($VT,[2,136]),o($VT,[2,139],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($VT,[2,140]),{12:304,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vj1,[2,149]),o($VT,[2,60]),{59:[1,306],67:305},o($VT,[2,87],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),o($Vl1,[2,83]),{31:[1,307]},{78:[1,308]},{81:[1,309]},o($Vo1,[2,33]),o($VT,$VU,{115:14,103:15,108:16,118:17,119:18,123:19,101:20,102:21,126:22,130:23,132:25,136:26,134:28,120:135,12:136,121:137,122:139,71:310,31:$VV,36:$V2,59:$V4,65:$VW,78:$V5,81:$V6,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),{12:311,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{12:312,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{31:[1,313]},{25:[2,115],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{45:[1,315],96:314,98:316,99:$Vv1,100:294},{45:[1,317]},o($Vp1,[2,107]),{43:$Vr1,94:318},{43:$Vr1,94:319},{43:[2,114],97:[1,320]},o($Vw1,[2,112],{115:14,103:15,108:16,118:17,119:18,123:19,126:22,130:23,132:25,136:26,134:28,15:175,16:176,17:177,18:178,19:179,20:180,21:181,22:182,23:183,24:184,12:185,88:194,90:195,93:196,101:197,102:198,14:239,2:$V61,31:$V71,36:$V2,59:$V4,70:$V81,72:$V91,73:$Va1,78:$V5,81:$V6,83:$Vb1,84:$Vc1,87:$Vd1,89:$Ve1,91:$Vf1,97:$Vg1,124:$V7,125:$V8,131:$V9,133:$Va,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf}),{25:[2,116],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{25:[2,117],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{12:321,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{25:[2,35],39:[1,322]},{25:[2,36],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($Vs1,[2,77]),o($Vs1,[2,79]),o($VT,[2,141],{92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv}),{32:[1,323]},o($VT,[2,66],{69:324,38:325,31:$VS}),o($Vl1,$Vm1,{66:326,68:$Vn1}),{31:[1,328],80:327},{31:$VY,42:$VZ,44:329,49:$V_,74:206,75:207,76:208,82:$Vi1},{34:$Vk1,61:[1,330]},{25:[2,91],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{25:[2,94],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{25:[2,93],39:[1,331]},{45:[1,332]},o($Vp1,[2,105]),{43:$Vr1,94:333},o($Vp1,[2,106]),o($Vw1,[2,109]),{45:[2,113]},{12:334,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{43:[2,103],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{12:335,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},{31:$VS,38:336},{34:[1,338],61:[1,337]},o($VT,[2,67]),o($Vl1,[2,84]),{34:[1,340],79:[1,339]},o($VH,[2,88]),{82:[1,341]},{25:[2,71]},{12:342,31:$V1,36:$V2,59:$V4,78:$V5,81:$V6,101:20,102:21,103:15,108:16,115:14,118:17,119:18,123:19,124:$V7,125:$V8,126:22,130:23,131:$V9,132:25,133:$Va,134:28,136:26,137:$Vb,138:$Vc,139:$Vd,140:$Ve,141:$Vf},o($Vp1,[2,104]),o($Vw1,[2,110]),{43:[2,111],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},{25:[2,37],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($VT,[2,62]),{32:[2,65]},{31:$VS,38:343},o($Vl1,[2,85]),{31:[1,344]},o($Vl1,[2,86]),{25:[2,95],92:$Vi,97:$Vj,104:$Vk,105:$Vl,106:$Vm,107:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,116:$Vu,117:$Vv},o($VT,[2,68]),o($VH,[2,89])],
defaultActions: {3:[2,2],43:[2,1],124:[2,50],131:[2,39],140:[2,142],170:[2,28],171:[2,29],202:[2,51],249:[2,72],250:[2,73],319:[2,113],330:[2,71],337:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const fs = require('fs');
    const path = require('path');
	const SymbolScopes = require('./SymbolScopes');
	const ErrorManager = require('./ErrorManager');
	const ImportManager = require('./ImportManager');
	const Symbol = require('./Symbol');
	
	function createParser (yy) {
		const parser = new Parser();
		
		// .env file's path
		var mainFilePath = path.resolve(process.argv[2]);

		// given path can be a file named مدخل.جني
		// or a folder in which case we add file مدخل.جني
		if (!mainFilePath.endsWith('مدخل.جني')) {
			if (mainFilePath.endsWith('.جني')) {
				console.error('قم بتحديد ملف بئسم مدخل.جني');
				process.exit();
			}
			mainFilePath = path.join(mainFilePath, 'مدخل.جني');
		}
		
		const projectPath = path.dirname(mainFilePath);
		//const envpath = path.join(projectPath, "/.سياق");
		
		// Either pass symbolScopes object (for inline parsing)
		// Or make a new one
		const symbolScopes = yy ? yy.symbolScopes : new SymbolScopes(); //envpath);
		
		// I use yy to pass variables to the newly created parser
		parser.yy = {
			symbolScopes: symbolScopes, // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			funcStack: yy ? yy.funcStack: [] // holder stack for current function symbol		
		}
		
		parser.originalParse = parser.parse;
		parser.parse = function (input, ctx) {
			// here we add global imports to the input source code
			// do not add global imports on inlineparses
			var fileName = path.basename(ctx.filePath, '.جني');
			input = ( ctx.inlineParse ? '' : SymbolScopes.autoImportText(fileName) ) + input;
			try {
				var result = parser.originalParse(input, ctx);
				// result is the parsed file's global scope;
				if (result.setSourceFile) {
					result.setSourceFile(fileName);
				}
				return result;
			} catch (e) {
				// exception while parsing, lets show errors
				console.log(e);
				ErrorManager.printAll();
			}
		}
		
		return parser;
	}
	
	// override default error handler
	parser.parseError = function (str, hash) {
		ErrorManager.error(
			"لم يتوقع: '" + hash.text + "'" + '\n' + str
		);
		ErrorManager.printAll();
	}
	
	function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const createParser = require('./jparser');
		const _parser = createParser(yy);
		try {
			const scope = _parser.parse(s, {
				inlineParse: true,
				filePath: context.filePath,
				projectPath: path.resolve(context.projectPath),
				outPath: context.outPath
			});
			return scope;
		} catch (e) {
			console.log(e);
			ErrorManager.printAll();
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img,ئدخال:input,سمة:style"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	function processJNX(src, context, yy) {
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = processJNXControl(src, context, yy);
		src = src.replaceAll('_{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		while (s != (
			s = s.replace(rgCond, "` + ($2 '') + `").
				replace(rgWhen, function ($0, $1, $2, $3, $4) {
					var result = inlineParse($2.replace('<x-', '<'), context, yy) + " ? `" + $4 + "` :";
					return result;
				}).replace(rgElse, "`$2` +")
		)) {}
		return '`' + s + '`';
	}

	// Utils
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }


module.exports = createParser;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return false 
break;
case 2:/* skip comments */
break;
case 3:return 141
break;
case 4:return 97
break;
case 5:return 99
break;
case 6:return 45
break;
case 7:return 138
break;
case 8:return 139
break;
case 9:return 140
break;
case 10:return 83
break;
case 11:return 37
break;
case 12:return 65
break;
case 13:return 56
break;
case 14:return 42
break;
case 15:return 49
break;
case 16:return 109
break;
case 17:return 110
break;
case 18:return 112
break;
case 19:return 114
break;
case 20:return 111
break;
case 21:return 113
break;
case 22:return 116
break;
case 23:return 117
break;
case 24:return 104
break;
case 25:return 'RETURNS'
break;
case 26:return 105
break;
case 27:return 106
break;
case 28:return 107
break;
case 29:return '%'
break;
case 30:return 59
break;
case 31:return 61
break;
case 32:return 78
break;
case 33:return 79
break;
case 34:return 81
break;
case 35:return 82
break;
case 36:return 43
break;
case 37:return 25
break;
case 38:return 34
break;
case 39:return 131
break;
case 40:return 35
break;
case 41:return 39
break;
case 42:return 68
break;
case 43:return 87
break;
case 44:return 125
break;
case 45:return 70
break;
case 46:return 72
break;
case 47:return 73
break;
case 48:return 91
break;
case 49:return 92
break;
case 50:return 89
break;
case 51:return 84
break;
case 52:return 26
break;
case 53:return 32
break;
case 54:return 'NEW'
break;
case 55:return 28
break;
case 56:return 33
break;
case 57:return 124
break;
case 58:return 133
break;
case 59:return 36 // Double quoted string
break;
case 60:return 36 // Single quoted string
break;
case 61:return 137  // Eastern Arabic numerals
break;
case 62:return 31
break;
case 63:return 137 // Western Arabic numerals
break;
case 64:return 5
break;
case 65:return 'UNKNOWN'
break;
}
},
rules: [/^(?:[ \t\v\f\r\n]+)/,/^(?:\n)/,/^(?:#[^\n]*)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا)/,/^(?:وئلا)/,/^(?:تم)/,/^(?:صحيح)/,/^(?:خطئ)/,/^(?:عدم)/,/^(?:دع)/,/^(?:ئعلن)/,/^(?:دالة)/,/^(?:وعد)/,/^(?:بنية)/,/^(?:تعداد)/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو )/,/^(?:ئو )/,/^(?:\+)/,/^(?:->)/,/^(?:-)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:؟)/,/^(?:ئرجع )/,/^(?:هدا)/,/^(?:يمدد )/,/^(?:يختصر )/,/^(?:يملك )/,/^(?:لكل )/,/^(?:في )/,/^(?:طالما )/,/^(?:قل )/,/^(?:ئورد )/,/^(?:ك )/,/^(?:ئنشئ )/,/^(?:من )/,/^(?:الكل )/,/^(?:ريتما )/,/^(?:ليس )/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}