ئورد مفترض ك __بتشدبي من '//cdn.jsdelivr.net/npm/pouchdb@8.0.1/+esm'؛
ئورد مفترض ك __بتشفايند من '//cdn.jsdelivr.net/npm/pouchdb-find@8.0.1/+esm'؛
ئورد وضيفة؛


# بنية معلومات قاعدة البيانات
ئعلن بنية معلوقاب:
	نصية ئسمقاب، #ئسم قاعدة البيانات
	عدد كموتيقة، #عدد الوتيقات في القاعدة
	نصية مضيف #ئسم مضيف القاعدة
تم

ئعلن بنية نتجقاب:
	نوعبنية[] وتيقات،
	نصية تحدير،
	نوعبنية ئحصاتنف،
	نصية بوكمارك
تم

ئعلن بنية خيائستنسخ:
	منطق حي، #live
    منطق ئعدمحا، #retry
    وضيفة فلتر، #filter
    نصية[] معرفات، #doc_ids
    نوعبنية معطيات، #query_params
    نصية مشهد، #view
    نوعبنية حدد، #selector
    عدد مند، #since
    عدد دقتقلب، #heartbeat
    عدد مهلة، #timeout
    عدد حجمدفعة، #batch_size
    عدد حددفعة #batches_limit
تم

ئعلن _قموئستنسخ = {حي:'live'، ئعدمحا:'retry'، فلتر:'filter'، معرفات:'doc_ids'، معطيات:'query_params'، 
	مشهد:'view'، حدد:'selector'، مند:'since'، دقتقلب:'heartbeat'، مهلة:'timeout'، 
	حجمدفعة:'batch_size'، حددفعة:'batches_limit'}؛

ئعلن بنية خيائجلب:
	نصية مراجعة،
	منطق مراجعات،
	منطق معلوجعات،
	نصية[] جعامفتوحات،
	منطق صدامات،
	منطق مرفقات،
	منطق ئتنائي،
	منطق ئحدت
تم

ئعلن _قموئجلب = {مراجعة:'rev'، مراجعات:'revs'، معلوجعات:'revs_info'، جعامفتوحات:'open_revs'،
	صدامات:'conflicts'، مرفقات:'attachments'، ئتنائي:'binary'، ئحدت:'latest'}؛


ئعلن _بتشدبي (نصية ئسم، نوعبنية ئستيق؟):
	يختصر __بتشدبي؛
تم

ئعلن بتشدبي (نصية نصئتصال):
	يملك بتش؛
	
	ئدا نصئتصال.يتضمن('@'):
		نصية[] ئتص = نصئتصال.عووض('https://'، '').قسسم('@')؛
		نصية _ولوجيات = ئتص[0]؛
		نصية رابط = ئتص[1]؛
		نصية[] ولوجيات = _ولوجيات.قسسم(':')؛
		
		نوعبنية مدخ = {
			auth: {
				username: ولوجيات[0]،
				password: ولوجيات[1]
			}
		}؛
		
		هدا.بتش = _بتشدبي (ئسم: "https://_{رابط}"، ئستيق: مدخ)؛
	وئلا:
		هدا.بتش = _بتشدبي (ئسم: نصئتصال)؛
	تم
تم

ئعلن مدخل ():
	__بتشدبي.plugin(__بتشفايند)؛
تم

ئعلن بتشدبي.معلو () ك وعد معلوقاب:
	دع معلو = ريتما هدا.بتش['info']()؛
	ئرجع {
		ئسمقاب: معلو.db_name ك نصية،
		كموتيقة: معلو.doc_count ك عدد،
		مضيف: معلو.host ك نصية
	}؛
تم

ئعلن بتشدبي.خدفهرس (نصية[] حقلين، نصية ئسم؟، نصية نوع؟، نصية وتصم؟) ك وعد منطق:
	دع فه = {
		index: {}
	}؛
	ئدا حقلين: فه.index.fields = حقلين؛ تم
	ئدا ئسم: فه.index.name = ئسم؛ تم
	ئدا نوع: فه.index.type = نوع؛ تم
	ئدا وتصم: فه.index.ddoc = وتصم؛ تم
	
	دع نتج = ريتما هدا.بتش['createIndex'](فه)؛
	ئرجع (نتج['result'] == 'created')؛
تم

ئعلن بتشدبي.ئستعلم (نوعبنية حدد، نصية[] حقلين؟، نصية[] رتتب؟، عدد ئحصر؟، عدد تجاوز؟) ك وعد نتجقاب:
	دع مدخ = {}؛
	
	مدخ.selector = حدد؛
	ئدا رتتب: 
		مدخ.sort = رتتب؛
	تم
	ئدا ئحصر: 
		مدخ.limit = ئحصر؛
	تم
	ئدا تجاوز: 
		مدخ.skip = تجاوز؛
	تم
	ئدا حقلين: 
		مدخ.fields = حقلين؛
	تم
	
	دع نتج = ريتما هدا.بتش['find'](مدخ)؛
	
	لكل عنصر في نتج.docs:
		عنصر._معرف = عنصر._id؛
		عنصر._نسخة = عنصر._rev؛
	تم
	
	ئرجع {
		وتيقات: نتج.docs ك نوعبنية[]،
		تحدير: نتج.warning ك نصية،
		ئحصاتنف: نتج.execution_stats ك نوعبنية،
		بوكمارك: نتج.bookmark ك نصية
	}؛
تم

ئعلن بتشدبي.ئجلب (نصية معرف، خيائجلب خيا؟) ك وعد نوعبنية:
	دع مدخ = عدم؛
	ئدا خيا:
		مدخ = {}؛
		لكل مفتاح في نوعبنية.مفتاحين(خيا):
			نصية قمفتاح = _قموئجلب[مفتاح]؛
			مدخ[قمفتاح] = خيا[مفتاح]؛
		تم
	تم
	دع نتج = ريتما __بتشدبي['get'](معرف، مدخ)؛
	ئرجع {
		_معرف: نتج._id،
		_مراجعة: نتج._rev،
		_محدوف: نتج._deleted،
		_مرفقات: نتج.attachements
	}؛
تم

ئعلن بتشدبي.خدعديد (منوع[] وتيقات) ك وعد منوع[]:
	منوع[] مدخوتيقات = []؛
	لكل وتيقة في وتيقات:
		وتيقة['_id'] = وتيقة['_معرف'] ئو وتيقة['_id']؛
		وتيقة['_deleted'] = وتيقة['_محدوف'] ئو وتيقة['_deleted']؛
		وتيقة['_rev'] = وتيقة['_مراجعة'] ئو وتيقة['_rev']؛
		ئشطب وتيقة['_معرف']؛
		ئشطب وتيقة['_محدوف']؛
		ئشطب وتيقة['_مراجعة']؛
	تم
	منوع[] نتج = ريتما هدا.بتش['bulkDocs'](وتيقات) ك منوع[]؛
	لكل نت في نتج:
		نت['نجح'] = نت['ok']؛
		نت['معرف'] = نت['id']؛
		نت['مراجعة'] = نت['rev']؛
	تم
	ئرجع نتج؛
تم

ئعلن ئستنسخ (بتشدبي مصدر، بتشدبي هدف، خيائستنسخ خيا؟) ك وعد نوعبنية:
	دع مدخ = عدم؛
	ئدا خيا:
		مدخ = {}؛
		لكل مفتاح في نوعبنية.مفتاحين(خيا):
			نصية قمفتاح = _قموئستنسخ[مفتاح]؛
			مدخ[قمفتاح] = خيا[مفتاح]؛
		تم
	تم
	دع نتج = ريتما __بتشدبي['replicate'](مصدر.بتش، هدف.بتش، مدخ)؛
	ئرجع {
		كمقرئ: نتج.docs_read،
		تمام: نتج.ok
	}؛
تم

ئعلن زامن (بتشدبي مصدر، بتشدبي هدف، خيائستنسخ خيا؟) ك وعد نوعبنية:
	دع مدخ = {}؛
	ئدا خيا:
		لكل مفتاح في نوعبنية.مفتاحين(خيا):
			نصية قمفتاح = _قموئستنسخ[مفتاح]؛
			مدخ[قمفتاح] = خيا[مفتاح]؛
		تم
	تم
	دع نتج؛
	ئدا خيا:
		نتج = ريتما __بتشدبي['sync'](مصدر.بتش، هدف.بتش، مدخ)؛
	وئلا:
		نتج = ريتما __بتشدبي['sync'](مصدر.بتش، هدف.بتش)؛
	تم
	دع سحب = نتج['pull']؛
	دع دفع = نتج['push']؛
	ئرجع {
		سحب: {
			كمخطئقرائة: سحب.doc_write_failures،
			كمقرئ: سحب.docs_read،
			كمكتب: سحب.docs_written،
			وقتنهاية: سحب.end_time،
			خطئات: سحب.errors،
			تمام: سحب.ok،
			وقتبداية: سحب.start_time،
			حالة: سحب.status
		}،
		دفع: {
			كمخطئقرائة: دفع.doc_write_failures،
			كمقرئ: دفع.docs_read،
			كمكتب: دفع.docs_written،
			وقتنهاية: دفع.end_time،
			خطئات: دفع.errors،
			تمام: دفع.ok،
			وقتبداية: دفع.start_time،
			حالة: دفع.status		
		}
	}؛
تم

ئعلن ئستنسخ_نصية (نصية مصدر، نصية هدف، خيائستنسخ خيا) ك وعد نوعبنية:
	دع مدخ = عدم؛
	ئدا خيا:
		مدخ = {}؛
		لكل مفتاح في نوعبنية.مفتاحين(خيا):
			نصية قمفتاح = _قموئستنسخ[مفتاح]؛
			مدخ[قمفتاح] = خيا[مفتاح]؛
		تم
	تم
	دع نتج = ريتما __بتشدبي['replicate'](مصدر، هدف، مدخ)؛
	ئرجع {
		كمقرئ: نتج.docs_read،
		تمام: نتج.ok
	}؛
تم
